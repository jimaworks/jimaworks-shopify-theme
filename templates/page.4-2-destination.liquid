<div class="grid">

    <div class="grid__item">
  
      <div class="section-header">
        <h1 class="section-header--title">{{ page.title }}</h1>
      </div>
  
      <div class="rte">
        <!--  RelationShips DestinationState
                  https://jimaworks.com/pages/4-b-destination-in-new-world
                  template:  page
                  Title: 4. Destination. (b) Where did they end up?

      Apr 16 2019:1600 Start to construct CountryOforigin and StateDestination pages
      Apr 19 2019:1400 Origin/Destination choices w "Unk", regions, & individ countries/states, plus addl sort choices
      Apr 21 2019:0700 Functions for nested <select> w dynamic rebuilds of next options from chosen option
      Apr 22 2019:1600 Load all sections and states, add capability for user-provided counties and cities
      Apr 23 2019:0700 Add the history map background passed in from timeline page
      Apr 25 2019:1430 Put in the correct "nextPage"'s to make it live.
      Apr 26 2019:1130 Update text box with results of DestinationState(++).  (### note that this could go wrong if have city/county but not state, etc. ###)
      Apr 27 2019:0830 Repair loop updating dynamics.  (It turns out that the loop tgt value is updated every cycle)
      Jun 09 2019:1100 Incoporate into the TextBox regime
      Jun 12 2019:1600 Add text box contents to bottom of page and correct choice updates
      Jun 15 2019:0700 Lightgrey-ize textbox echo w darkblue new text and get the category descriptions to show on choice updates
      Jun 17 2019:0900 Fix location of text bo lookahead so is same as on Origins page
      Jul 15 2019:0725 Indents, note about future edit poss; Save&FinishLater to top of page
      Jul 31 2019:0845 Fix missing "Pennsylvania"
      Sep 01 2019:0800 Unify code for Origins and Destination.  Defer UserProvided functionality
      Mar 08 2020:2030 Minimal Theme color style for menu titles/descriptions
      Mar 20 2020:1515  Swap in to new jimaworks page sequence
      Apr 08 2020:1700 Define localStorage.Destination
      Apr 25 2020:1415 Show both Destination lines

      Next: Add abbreviations in the generated text.
-->
<style>
    .tooltip {
      position: relative;
      display: inline-block;
      border-bottom: 1px dotted black;
    }
    
    .tooltip .tooltiptext {
      visibility: hidden;
      width: 240px;
      background-color: #05537a; /* jimaworks top bar blue */
      /* color: #fff; */
      color: Cornsilk;
      text-align: left;
      border-radius: 6px;
      padding: 5px 0;
    
      /* Position the tooltip */
      position: absolute;
      z-index: 1;
      /* top: -5px; */
      /* left: 105%; */
      top: 40px;
      left: 10px;
    }
    
    .tooltip:hover .tooltiptext {
      visibility: visible;
    }
    </style>
    <div style="color: #0e5478; font-size: large; font-weight: bold; line-height: 80%; z-index: 20;">Chose down to the level you know:</div>
    <div id="DisplayOverlays" style="position: relative; width: 1000px; height: 400px; color: cornsilk; text-shadow: 1px 1px 0px Darkblue; background-image: url('https://cdn.shopify.com/s/files/1/1336/0641/files/jimaworks_1000x1000.jpg');">
    <div id="routeDisplay"></div>
    <div style="position: absolute; z-index: 25; top: 25px; left: 70px; width: 180px; height: 130px;"><select id="countrySection" title="Select that section of the US where your story concludes" style="color: #05537a; font-weight: bold;" onchange="ChangeSectionStatesList()">
    <option id="SectionHeading" value="">-- Section of US --</option>
    <option id="SectionUnknown" value="Unk" title="Don't know more detail">Unknown</option>
    </select></div>
    <div style="position: absolute; z-index: 25; top: 25px; left: 270px; width: 180px; height: 130px;"><select id="sectionState" title="Select the destination State for this migration" style="color: #05537a; font-weight: bold;" onchange="ChangeStateCountiesList()">
    <option id="StateHeading" value="">-- State --</option>
    <option id="StateUnknown" value="Unk" title="Don't know more detail">Unknown</option>
    </select></div>
    <div style="position: absolute; z-index: 25; top: 25px; left: 470px; width: 180px; height: 130px;"><select id="stateCounty" title="Select the destination county for this migration" style="color: #05537a; font-weight: bold;" onchange="ChangeCountyCitiesList()">
    <option id="CountyHeading" value="">-- County --</option>
    <option id="CountyUnknown" value="Unk" title="Don't know more detail">Unknown</option>
    <option id="CountyUserOption" value="UserProvided" title="Provide the county">User-provided</option>
    </select></div>
    <div style="position: absolute; z-index: 25; top: 25px; left: 670px; width: 180px; height: 130px;"><select id="countyCity" title="Enter the destination city or town of this migration" style="color: #05537a; font-weight: bold;" onchange="ChangeCitysStreetList()">
    <option id="CityHeading" value="">-- City/Town --</option>
    <option id="CityUnknown" value="Unk" title="Don't know more detail">Unknown</option>
    <option id="CityUserOption" value="UserProvided" title="Provide the city name">User-provided</option>
    </select></div>
    <!--
    <div id="TextBoxDisplay" color="Ivory" style="position: absolute; z-index: 50; top: 180px; left: 70px; width: 540px; height: 30px; color: white; font-weight: bold; text-shadow: 1px 1px 0px Black;"></div>
        <div id="CurrentSelectionDisplay" color = "Ivory" style="position: absolute; z-index: 50; top: 210px; left: 70px; width: 540px; height: 30px; color: White; font-weight: bold; text-shadow: 1px 1px 0px Black;">
        </div>
        ### ??? For some reason the div below results in text lower down than the identical div in Origins.  ###
    <div id="CurrentSelectionDisplay" color="Ivory" style="position: absolute; z-index: 50; top: 380px; left: 70px; width: 540px; height: 30px; color: white; font-weight: bold; text-shadow: 1px 1px 0px Black;"></div>
    <div id="CurrentSelectionDisplay" color="Ivory" style="position: absolute; z-index: 50; top: 340px; left: 70px; width: 540px; height: 30px; color: white; font-weight: bold; text-shadow: 1px 1px 0px Black;"></div>
    <div style="color: grey;">
    --> <!--
    <h4>Your Destination Text Box contents are currently:
        <br />     Line1: <span id="destinationTextBoxL1"> " " </span>
        <br />     Line2: <span id="destinationTextBoxL2" style="color: darkblue;"> " " </span>
        <br />(You'll have more opportunities to edit later)</h4>
    </div>
    
    <script>// <![CDATA[
    if ((localStorage.DestinyLine1===undefined)||(localStorage.DestinyLine1==="undefined")||(localStorage.DestinyLine1==="")) {
            document.getElementById("destinationTextBoxL1").innerHTML = "(currently blank)" ;
        }
        else {
            document.getElementById("destinationTextBoxL1").innerHTML = localStorage.DestinyLine1 ;
        }
        if ((localStorage.DestinyLine2===undefined)||(localStorage.DestinyLine2==="undefined")||(localStorage.DestinyLine2==="")) {
            document.getElementById("destinationTextBoxL2").innerHTML = "(currently blank)" ;
        }
        else {
            document.getElementById("destinationTextBoxL2").innerHTML = localStorage.DestinyLine2 ;
        }
    // ]]>
    </script>
    -->
    <div style="position: absolute; z-index: 2250; top: 215px; left: 70px; width: 800px; height: 60px; font-size: x-large;">
    <h4><span style="color: cornsilk;"> Arrival Line 1 = <span id="destinationTextBoxL1">"Port of Entry"- provided by you on previous page</span> <br /> Arrival Line 2 = <span id="destinationTextBoxL2">"Destination" - provided by you on this page</span> <!--
      <br />
      <span id="titleTextBoxL3">[Title Line 3: "Year-of-Crossing" - provided by you on next page]</span> </span>
    --> </span></h4>
    </div>
    <div style="font-weight: bold; line-height: 80%; position: absolute; z-index: 50; top: 310px; left: 70px;">
    <h4>(Later, if you choose to customize, you can change to anything you want.)</h4>
    </div>
    <div id="doneButton" style="position: absolute; z-index: 22250; top: 350px; left: 70px;">
        <button id="nextButton" class="btn" style="font-size: 1.25em" 
        onclick="AcceptCurrentDestination()"> Continue to "Ship of Crossing". 
    </button></div>
    </div>
    <!--
    <br />
    <br />
    <button onclick="actionOnSave()">(Click here to save and come back later)</button>
    -->
    <script>// <![CDATA[
    function actionOnSave() {
        var SaveForLaterPage = "https://jimaworks.com/pages/saveandreturnlater" ;
        window.location.assign(SaveForLaterPage);
    }
    // ]]></script>
    <script>// <![CDATA[

    var nextPage = "https://jimaworks.com/pages/5-ship-or-plane" ;
    if (document.referrer == 'https://jimaworks.com/pages/001-edit-your-relationships')
    {
        $('#nextButton').text('Return to Edit page');
        nextPage = "https://jimaworks.com/pages/001-edit-your-relationships" ;
    }
    
    if ((localStorage.DestinationSection==undefined)||(localStorage.DestinationSection=='')) {
        localStorage.DestinationSection = "Unk" ;
    }
    if ((localStorage.DestinationState==undefined)||(localStorage.DestinationState=='')) {
        localStorage.DestinationState = "Unk" ;
    }
    if ((localStorage.DestinationCounty==undefined)||(localStorage.DestinationCounty=='')) {
        localStorage.DestinationCounty = "Unk" ;
    }
    if ((localStorage.DestinationCity==undefined)||(localStorage.DestinationCity=='')) {
        localStorage.DestinationCity = "Unk" ;
    }
    
    //jimaworksDestinationSection datatypes and their subregions
    var regionAndCountries = {};
    regionAndCountries['WholeWorldAmCtr'] = ['EuropeAndTheMediterranean', 'Africa', 'PacificRim', 'SouthAmericaAndTheCaribbean', 'SouthAsia', 'Northern America'];
    regionAndCountries['Northern America'] = [  'Bermuda',  'Canada',   'Greenland',    'Saint Pierre and Miquelon',    'United States of America'  ] ;
    
    regionAndCountries['EuropeAndTheMediterranean'] = ['Eastern Europe', 'Western Europe', 'Northern Europe', 'Southern Europe', 'Northern Africa', 'Western Asia'];
    regionAndCountries['Africa'] = ['Northern Africa', 'Sub-Saharan Africa'];
    regionAndCountries['PacificRim'] = ['Eastern Asia', 'Australia and New Zealand', 'South-eastern Asia', 'Melanesia', 'Micronesia','Polynesia' ];
    regionAndCountries['SouthAmericaAndTheCaribbean'] = ['Latin America and the Caribbean'];
    regionAndCountries['SouthAsia'] = ['Southern Asia', 'South-eastern Asia', 'Central Asia'];
    //regionAndCountries['WholeWorldEuCtr'] = ['Sweden', 'Norway', 'Iceland'];
    //regionAndCountries['WholeWorldAmCtr'] = ['Sweden', 'Norway', 'Iceland'];
    //regionAndCountries['WholeWorldDoubled2Left/R'] = ['Sweden', 'Norway', 'Iceland'];
    regionAndCountries['Northern America'] = [  'Bermuda',  'Canada',   'Greenland',    'Saint Pierre and Miquelon',    'United States of America'  ] ;
    
    regionAndCountries['United States of America'] = [ 'Middle Atlantic', 'New England', 'East North Central','East South Central','Mountain', 'Pacific','South Atlantic','West North Central','West South Central' ] ;
    regionAndCountries['Canada'] = [   ] ;
    
    regionAndCountries['East North Central'] = [    'Illinois',     'Indiana',  'Michigan',     'Ohio',     'Wisconsin',    ] ;
    regionAndCountries['East South Central'] = [    'Alabama',  'Kentucky',     'Mississippi',  'Tennessee',    ] ;
    regionAndCountries['Middle Atlantic'] = [   'New Jersey',   'New York',     'Pennsylvania',     ] ;
    regionAndCountries['Mountain'] = [  'Arizona',  'Colorado',     'Idaho',    'Montana',  'Nevada',   'New Mexico',   'Utah',     'Wyoming',  ] ;
    regionAndCountries['New England'] = [   'Connecticut',  'Maine',    'Massachusetts',    'New Hampshire',    'Rhode Island',     'Vermont',  ] ;
    regionAndCountries['Pacific'] = [   'Alaska',   'California',   'Hawaii',   'Oregon',   'Washington',   ] ;
    regionAndCountries['South Atlantic'] = [    'Delaware',     'District of Columbia',     'Florida',  'Georgia',  'Maryland',     'North Carolina',   'South Carolina',   'Virginia',     'West Virginia',    ] ;
    regionAndCountries['West North Central'] = [    'Iowa',     'Kansas',   'Minnesota',    'Missouri',     'Nebraska',     'North Dakota',     'South Dakota',     ] ;
    regionAndCountries['West South Central'] = [    'Arkansas',     'Louisiana',    'Oklahoma',     'Texas',    ] ;
    
    var countriesAndProvinces = {};
    
    var provincesAndCities = {};
    
    // not updating the WorldRegionsList, nor even of a Region. so not 'UpdateRegionAreasList()'
    // Start from a given country in a region, Here the USA in North America, and update its geographical sections
    function UpdateCountrySectionsList() {
      //alert("SetRegionList()") ;
      var northAmCountriesList = regionAndCountries['Northern America'] ; //['WholeWorldAmCtr'] ;
      console.log("northAmCountriesList = "+northAmCountriesList) ;
      var selCountry = 'United States of America' ;
      console.log("selCountry = "+selCountry) ;
      var sectionList = document.getElementById("countrySection");
      console.log('$$$A: UpdateCountrySectionsList(): document.getElementById("countrySection").options[0].text=='+document.getElementById("countrySection").options[0].text) ;
      var noopOption = sectionList[0];
      var unkOption = sectionList[1];
      console.log("sectionList = "+sectionList) ;
      //var selCountry = northAmCountriesList.options[northAmCountriesList.selectedIndex].value;
      if (selCountry==undefined) {
          alert("Country not defined!?  Will use US") ;
          selCountry = 'United States of America' ;  // carry on with the most common "Destination" value
      }
      else if (selCountry=="") {
          alert("Country empty!?  Will use US") ;
          selCountry = 'United States of America' ;  // carry on with the most common "Destination" value
    //        console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
    /* default "Unk" triggers Exit...
    */
        else if (selCountry=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        else {
          // Keep the first two options
          var i;
          var origOptionsListLength = sectionList.options.length ;
          for (i = 0; i<origOptionsListLength; i++) {
            console.log("removing (0) from "+sectionList) ;
            sectionList.remove(0);
          }
          sectionList.options.add(noopOption);
          sectionList.options.add(unkOption);
          var sections = regionAndCountries[selCountry];
          if (sections) {
            for (i = 0; i < sections.length; i++) {
              var section = new Option(sections[i], sections[i]);
              sectionList.options.add(section);
              console.log("added section.value=="+section.value+". sectionList is now "+sectionList) ;
    
              if (section[i]==localStorage.DestinationSection) {
                  sectionList.selectedIndex = i;
              }
            }
          }
          // uniformly set selected index to category description
          sectionList.selectedIndex = 0;
        console.log('$$$B: UpdateCountrySectionsList(): document.getElementById("countrySection").options[0].text=='+document.getElementById("countrySection").options[0].text) ;
        }
     //document.getElementById("TextBoxDisplay").innerHTML = 'Current Destination Text Box Line2: "'+localStorage.DestinyLine2+'"' ;
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    }
    
    
    function EchoCurrentDestinationEntries() {
    /*
    function EchoCurrentOriginEntries() {
        var AreaStr=localStorage.AreaOfOrigin ;
        var CountryStr=localStorage.CountryOfOrigin ;
        var ProvinceStr=localStorage.ProvinceOfOrigin ;
        var CityStr=localStorage.CityOfOrigin ;
    */
    
        var AreaStr ;
        var CountryStr ;
        var ProvinceStr ;
        var CityStr ;
    
     if (localStorage.DestinationSection=='Unk') {
         SectionStr="Unknown";
     }
     else {
         SectionStr=localStorage.DestinationSection ;
     };
     if (localStorage.DestinationState=='Unk') {
         StateStr="Unknown";
     }
     else {
         StateStr=localStorage.DestinationState;
     } ;
     if (localStorage.DestinationCounty=='Unk') {
         CountyStr="Unknown";
     }
     else {
         CountyStr=localStorage.DestinationCounty;
     } ;
     CityStr=localStorage.DestinationCity ;
     if (localStorage.DestinationCity=='Unk') {
         CityStr="Unknown";
     }
     else {
         CityStr=localStorage.DestinationCity;
     } ;
    /*
        document.getElementById("CurrentSelectionDisplay").innerHTML  = 'Currently-provided Desinations Info: ';
        document.getElementById("CurrentSelectionDisplay").innerHTML += '<br>Section: '+SectionStr ; //### region vs area again ###
        document.getElementById("CurrentSelectionDisplay").innerHTML += '; <br>State: '+StateStr ;
        document.getElementById("CurrentSelectionDisplay").innerHTML += '; <br>County: '+CountyStr ;
        document.getElementById("CurrentSelectionDisplay").innerHTML += '; <br>City: '+CityStr ;
    */
    }
    
    function findOptionIndex(option, menu) {
    
    }
    
    function updateDestinationMenuHeadings() {
        //alert('updateDestinationMenuHeadings()') ;
        console.log('updateDestinationMenuHeadings()') ;
        if (false & (localStorage.DestinationSection != 'Unk') & (localStorage.DestinationSection != 'Unknown') & (localStorage.DestinationSection != '')) {
            console.log('*****localStorage.DestinationSection=='+localStorage.DestinationSection+'*********') ;
            document.getElementById("SectionHeading").text = localStorage.DestinationSection ;
        }
        else { // -- Part of World --
            // countrySection menu
            //document.getElementById("SectionHeading").text = "-- Section of US --" ;
            document.getElementById("sectionState").selectedIndex = 0 ;
            console.log('***** setting SectionHeading to -- Section of US -- *********') ;
        }
    
        if (false & (localStorage.DestinationState != 'Unk') & (localStorage.DestinationState != 'Unknown') & (localStorage.DestinationState != '')) {
            document.getElementById("StateHeading").text = localStorage.DestinationState ;
        }
        else { // -- Country of Origin --
            // sectionState menu
            //document.getElementById("StateHeading").text = "-- State --" ;
            document.getElementById("sectionState").selectedIndex = 0 ;
        }
    
        if (false & (localStorage.DestinationCounty != 'Unk') & (localStorage.DestinationCounty != 'Unknown') & (localStorage.DestinationCounty != '')) {
            document.getElementById("CountyHeading").text = localStorage.DestinationCounty ;
        }
    //    else if (localStorage.DestinationCounty == '') {
    //        document.getElementById("stateCounty").selectedIndex = 0 ;
    //        document.getElementById("CountyHeading").text = "-- County --" ;
    //    }
    //### take this out until can figure out how to handle UserProvided ###
    //###    else if (localStorage.DestinationCounty == 'UserProvided') {
    //###        UserProvidedPlacename("homeProvince") ;
    //###     }
        else { // -- Province --
           // document.getElementById("CountyHeading").text = "-- County --" ;
           document.getElementById("stateCounty").selectedIndex = 0 ;
        }
    
        if (false & (localStorage.DestinationCity != 'Unk') & (localStorage.DestinationCity != 'Unknown') & (localStorage.DestinationCity != '')) {
            document.getElementById("CityHeading").text = localStorage.DestinationCity ;
        }
    //    else if (localStorage.DestinationCity == '') {
    //        document.getElementById("CityHeading").text = "-- City/Town --" ;
    //    }
    //### take this out until can figure out how to handle UserProvided ###
    //###    else if (localStorage.DestinationCity == 'UserProvided') {
    //###        UserProvidedPlacename("homeCity") ;
    //###     }
        else { // -- City --
           // document.getElementById("CityHeading").text = "-- City/Town --" ;
           document.getElementById("countyCity").selectedIndex = 0 ;
        }
    
    }
    
    
    
    function ChangeSectionStatesList2() {
      //alert("ChangeSectionStatesList()") ;
      var sectionList = document.getElementById("countrySection");
      console.log("sectionList = "+sectionList) ;
      var selSection = sectionList.options[sectionList.selectedIndex].value;
      if (localStorage.DestinationSection != selSection) {
          localStorage.DestinationSection = selSection ;
          localStorage.DestinationState = 'Unk' ;
          localStorage.DestinationCounty = 'Unk' ;
          localStorage.DestinationCity = 'Unk' ;
      }
      console.log("selSection == localStorage.DestinationSection == "+selSection) ;
    
      var stateList = document.getElementById("regionCountry");
      var noopOption = stateList[0];
      var unkOption = stateList[1];
    
      EchoDestinationTextBoxL2() ;
    
      console.log("stateList = "+stateList) ;
    /*
        if (selSection=="") {
            console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
        else if (selSection=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        else {
    */
          // Keep the first two options
          var i;
          var origOptionListLength = stateList.options.length ;
          for (i = 0; i<origOptionListLength; i++) {
            console.log("removing (0)=="+regionAndCountries[selSection]+" from "+stateList) ;
            stateList.remove(0);
          }
          stateList.options.add(noopOption);
          stateList.options.add(unkOption);
          var states = regionAndCountries[selSection];
          if (states) {
            for (i = 0; i < states.length; i++) {
              var state = new Option(states[i], states[i]);
              stateList.options.add(state);
              console.log("added state.value=="+state.value+". stateList is now "+stateList) ;
              if (state[i]==localStorage.DestinationState) {
                  // add two because have two addl options at the front of the list
                  stateList.selectedIndex = i;
              }
            }
          }
          // uniformly set selected index to category description
          stateList.selectedIndex = 0;
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    }
    
    
    function ChangeStateCountiesList() {
      //alert("ChangeStateCountiesList()()") ;
      console.log("ChangeStateCountiesList()()") ;
      var stateList = document.getElementById("sectionState");
      console.log("stateList = "+stateList) ;
      var selState = stateList.options[stateList.selectedIndex].value;
      if (localStorage.DestinationState != selState) {
          localStorage.DestinationState = selState ;
          localStorage.DestinationCounty = 'Unk' ;
          localStorage.DestinationCity = 'Unk' ;
      }
      console.log("selState == localStorage.DestinationState == "+selState) ;
    
      var countyList = document.getElementById("stateCounty");
      var noopOption = countyList[0];
      var unkOption = countyList[1];
      var userProvideOption = countyList[2];
      console.log("countyList = "+countyList) ;
      console.log("selState = "+selState) ;
    
      // updateDestinationTextBoxLine2() ;
    
        if (selState=="") {
            console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
        else if (selState=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        /* disallowing the naming of countries
        else if (selState=="UserProvided") {
            UserProvidedPlacename("homeProvince") ;
        }
        */
        else {
          // Keep the first two options
          var numCounties = countyList.options.length;
          for (i = 3; i<numCounties; i++) {
            console.log("removing.. countyList=="+countyList) ;
            countyList.remove(3);
          }
          countyList.options.add(noopOption);
          countyList.options.add(unkOption);
          countyList.options.add(userProvideOption);
          var counties = countriesAndProvinces[selState];
          if (counties) {
            for (i = 0; i < counties.length; i++) {
              var county = new Option(counties[i], counties[i]);
              countyList.options.add(county);
              console.log("added county.value=="+county.value+". countyList is now "+countyList) ;
            }
          }
          // ### province ?? ###
          // uniformly set selected index to category description
          countyList.selectedIndex = 0;
        }
    
            EchoDestinationTextBoxL2() ; // "EchoOriginsTextBoxL1() ;" in the original
            EchoCurrentDestinationEntries() ;
    
    }
    
    function ChangeStateCountiesList2() {
      //alert("ChangeStateCountiesList()()") ;
      console.log("ChangeStateCountiesList()()") ;
      var countryList = document.getElementById("regionCountry");
      console.log("countryList = "+countryList) ;
      var provinceList = document.getElementById("countryProvince");
      var noopOption = provinceList[0];
      var unkOption = provinceList[1];
      var userProvideOption = provinceList[2];
      console.log("provinceList = "+provinceList) ;
      var selCountry = countryList.options[countryList.selectedIndex].value;
      console.log("selCountry = "+selCountry) ;
    
      EchoDestinationTextBoxL2() ;
    
        if (selCountry=="") {
            console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
        else if (selCountry=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        /* disallowing the naming of countries
        else if (selCountry=="UserProvided") {
            UserProvidedPlacename("homeProvince") ;
        }
        */
        else {
          // Keep the first two options
          var i;
          for (i = 3; i<provinceList.options.length; i++) {
            console.log("removing.. provinceList=="+provinceList) ;
            provinceList.remove(3);
          }
          provinceList.options.add(noopOption);
          provinceList.options.add(unkOption);
          provinceList.options.add(userProvideOption);
          var countries = countriesAndProvinces[selCountry];
          if (countries) {
            for (i = 0; i < countries.length; i++) {
              var country = new Option(countries[i], countries[i]);
              provinceList.options.add(country);
              console.log("added country.value=="+country.value+". provinceList is now "+provinceList) ;
            }
          }
          // ### province ?? ###
          // uniformly set selected index to category description
          provinceList.selectedIndex = 0;
        }
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    }
    
    // function name a bit of a misnomer since it also handled the manual naming of the province
    function ChangeCountyCitiesList() {
      //alert("ChangeCountyCitiesList()") ;
      var provinceList = document.getElementById("stateCounty");
      var cityOrTownList = document.getElementById("countyCity");
      var selProvince = provinceList.options[provinceList.selectedIndex].value;
    
      EchoDestinationTextBoxL2() ;
    
        if (selProvince=="") {
            console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
        else if (selProvince=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        else if (selProvince=="UserProvided") {
            UserProvidedPlacename("homeProvince") ;
        }
        else {
          // Keep the first two options
          var i;
          for (i = 3; i<cityOrTownList.options.length; i++) {
            cityOrTownList.remove(3);
          }
          var provinces = countriesAndProvinces[selProvince];
          if (provinces) {
            for (i = 0; i < provinces.length; i++) {
              var province = new Option(provinces[i], provinces[i]);
              cityOrTownList.options.add(province);
            }
          }
          // uniformly set selected index to category description
          cityOrTownList.selectedIndex = 0;
        }
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    }
    
    // function name a bit of a misnomer since it also handled the manual naming of the city
    
    function ChangeCitysStreetList() {
      //alert("ChangeCitysStreetList()") ;
      var cityList = document.getElementById("countyCity");
      var streetList = document.getElementById("cityStreet");
      var selCity = cityList.options[cityList.selectedIndex].value;
    
        if (selCity=="") {
            console.log("Empty actions (i.e. value) selected.  Noop") ;
            //alert("Noop") ;
        }
        else if (selCity=="Unk") {
            AcceptCurrentDestination() ;
            //alert("Exit") ;
        }
        else if (selCity=="UserProvided") {
            UserProvidedPlacename("homeCity") ;
        }
        else {
          // Keep the first two options
          var i;
          for (i = 3; i<streetList.options.length; i++) {
            console.log("removing.. cityList=="+cityList) ;
            cityList.remove(3);
          }
          var countries = countriesAndProvinces[selCity];
          if (countries) {
            for (i = 0; i < countries.length; i++) {
              var country = new Option(countries[i], countries[i]);
              cityList.options.add(country);
              console.log("added country.value=="+country.value+". cityList is now "+cityList) ;
            }
          }
          // uniformly set selected index to category description
          cityList.selectedIndex = 0;
        }
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    }
    
    function EchoDestinationTextBoxL2() {
        var newDestinationTextBoxLine2  = '' ;
        if (localStorage.DestinationCity != 'Unk') {
            newDestinationTextBoxLine2 += localStorage.DestinationCity ;
            if ((localStorage.DestinationCounty != 'Unk') || (localStorage.DestinationState != 'Unk')) {
                newDestinationTextBoxLine2 += ', ' ;
            }
        }
        if (localStorage.DestinationCounty != 'Unk') {
            newDestinationTextBoxLine2 += localStorage.DestinationCounty ;
            if ((localStorage.DestinationState != 'Unk') || (localStorage.DestinationSection != 'Unk')) {
                newDestinationTextBoxLine2 += ', ' ;
            }
        }
        if (localStorage.DestinationState != 'Unk') {
            newDestinationTextBoxLine2 += localStorage.DestinationState ;
            // don't state area unless it's the only thing known
            //if ((localStorage.DestinationCounty != 'Unk') || (localStorage.DestinationState != 'Unk')) {
            //    newDestinationTextBoxLine2 += ', ' ;
            //}
        }
        else {
            newDestinationTextBoxLine2 += localStorage.DestinationSection ;
            // don't state area unless it's the only thing known
            //if ((localStorage.DestinationCounty != 'Unk') || (localStorage.DestinationState != 'Unk')) {
            //    newDestinationTextBoxLine2 += ', ' ;
            //}
        }
        document.getElementById("destinationTextBoxL1").innerHTML = localStorage.DestinyLine1 ;
        document.getElementById("destinationTextBoxL2").innerHTML = 'Destination: '+newDestinationTextBoxLine2 ;
        console.log("EchoDestinationTextBoxL2(): newDestinationTextBoxLine2=="+newDestinationTextBoxLine2) ;
    }
    
    
    function AcceptCurrentDestination() {
        var ProposedDestinationText ;
        if (localStorage.DestinationCity=="Unk") {
            if (localStorage.DestinationCounty=="Unk") {
                if (localStorage.DestinationCounty=="Unk") {
                    if (localStorage.DestinationSection=="Unk") {
                        // no new information, so no-op
                        ProposedDestinationText = '' ;
                    }
                    else {
                        // only region, so
                        ProposedDestinationText = 'Destination: '+localStorage.DestinationSection ;
                    }
                }
                else {
                    // region and country.  Just use country
                    ProposedDestinationText = 'Destination: '+localStorage.DestinationCounty ;
                }
            }
            else {
                // region, country, and province.  Combine province and country
                // ### note that this could go wrong if have city/province but not country, etc. ###
                ProposedDestinationText = 'Destination: '+localStorage.DestinationCounty+', '+localStorage.DestinationCounty ;
            }
        }
        else {
            // region, country, province, and city.  Combine city, province, and country
            ProposedDestinationText = 'Destination: '+localStorage.DestinationCity+' in '+localStorage.DestinationCounty+','+localStorage.DestinationCounty+'' ;
        }
        /*
        if (ProposedDestinationText==localStorage.DestinyLine2) {
            if (confirm('Previous Line 2 of the Destination text box reads:"'+localStorage.DestinyLine2+'". Accept and Continue?')) {
                localStorage.DestinyLine2 = ProposedDestinationText ;
                //var nextPage = "https://jimaworks.com/pages/1-c-map-background" ;
                window.location.assign(nextPage) ;
            }
        }
        else if (ProposedDestinationText && confirm('Previous Line 2 of the Destination text box reads:"'+localStorage.DestinyLine2+'". Change it to:"'+ProposedDestinationText+'" and Continue?')) {
            localStorage.DestinyLine2 = ProposedDestinationText ;
            //var nextPage = "https://jimaworks.com/pages/1-c-map-background" ;
            window.location.assign(nextPage) ;
        }
        else if (confirm('Continuing with Line 2 of the Destination text box as:"'+localStorage.DestinyLine2+'"')) {
                //var nextPage = "https://jimaworks.com/pages/1-c-map-background" ;
                window.location.assign(nextPage) ;
            //else just continue
        }
        localStorage.DestinationSection = selSection ;
        localStorage.DestinationState = 'Unk' ;
        localStorage.DestinationCounty = 'Unk' ;
        localStorage.DestinationCity = 'Unk' ;
        */
        localStorage.Destination  = "DestinationCity "+localStorage.DestinationCity
                              + ", DestinationCounty "+localStorage.DestinationCounty
                              + ", DestinationState "+localStorage.DestinationState
                              + ", DestinationSection "+localStorage.DestinationSection ;
        window.location.assign(nextPage) ;
    }
    
    
    
    function UserProvidedPlacename(locationType) {
        if (true) {
            alert("User-provided option under development.  Contact jimaworks to add the province and we will add.") ;
        }
        else {
            if (locationType=="homeProvince") {
                currentCounty = prompt("Enter the name of the home province.") ;
            }
            else if (locationType=="homeCity") {
                currentCity = prompt("Enter the name of the home city.") ;
            }
            /*
            if (locationType=="destinationCounty") {
                currentCity = prompt("Enter the name of the destination country.") ;
            }
            if (locationType=="destinationCity") {
                currentCity = prompt("Enter the name of the destination city.") ;
            }
            */
            else  {
                alert('Type of location for user-provided placename, "'+locationType+'" is unrecognized.') ;
            }
        }
    }
    // ]]></script>
    <script>// <![CDATA[
    function add_map_of_the_times() {
        var currRegionAbbrev = localStorage.RegionOfOriginAbbrev ;
        // This doesn't work because (?) stepping on prev val? >>> var prevThisNextAvailMapYears = prevThisNextMapYears(getDefaultYear())
        var availableMapYear = localStorage.currRteMapYear ; //2016 ; //getDefaultYear() ;
        var shopifyPrefix = "https://cdn.shopify.com/s/files/1/1336/0641/files/" ;
        //### making this smaller for ship-on-slider
        var shopifyImgSizePostfix = "_256x256" ;
        var currMapFile = shopifyPrefix + availableMapYear+"-Routes-"+currRegionAbbrev+shopifyImgSizePostfix+".png" ;
    
        // "https://cdn.shopify.com/s/files/1/1336/0641/files/1946-Routes-EuM_256x256.png"
        //alert("currMapFile=="+currMapFile) ;
        var src = currMapFile ;
        //var src = "https://cdn.shopify.com/s/files/1/1336/0641/files/1946-Routes-EuM_256x256.png";
        //show_image("https://cdn.shopify.com/s/files/1/1336/0641/files/1946-Routes-EuM_256x256.png", 276,110, "MapOfTheTimes");
        show_image(currMapFile, 276,110, "MapOfTheTimes");
        //return(currMapFile) ;
      }
    
    
    /*
        function show_image(src, width, height, alt) {
        var img = document.createElement("img");
        img.src = src;
        img.width = width;
        img.height = height;
        img.alt = alt;
    */
    
        // This next line will just add it to the <body> tag
        // document.body.appendChild(img);
        // add it to the <body> tag
     //   document.getElementById("routeDisplay").innerHTML = img ;
    
    function show_image(src, width, height, alt){
        var ImgOverlayHTML = "" ;
        var routeImageStyleStr  = "" ;
        var placementTop = 50;
        var placementLeft = 40;
        var placementWidth = 650; // 1.75*400
        var placementHeight = 350; // 1.75*400
        var placementBorder = 3;
        var placementLineStyle = "solid";
        var placementLineColor = "red";
        var placementImgOverwrite = 20;
    
    //EuM
            placementTop = 30;
            placementLeft = 275;
            placementWidth = 375;
            placementHeight = 200;
            placementBorder = 3;
            placementLineStyle = "solid";
            placementLineColor = "red";
    
    
            routeImageStyleStr = " style=\"position: absolute; ";
            routeImageStyleStr += "top: "+ placementTop +"px; ";
            routeImageStyleStr += "left: "+ placementLeft +"px; ";
            routeImageStyleStr += "width: "+ placementWidth +"px; ";
            routeImageStyleStr += "height: "+ placementHeight +"px; ";
            routeImageStyleStr += "border: "+ placementBorder +"px; ";
            routeImageStyleStr += placementLineStyle +" ";
            routeImageStyleStr += placementLineColor +"; ";
            routeImageStyleStr += "z-index: "+ placementImgOverwrite +"; ";
            routeImageStyleStr += "\"";
    
            /* map display */
            ImgOverlayHTML +=   '<div' ;
            //ImgOverlayHTML +=   ' style=\"position: absolute; bottom: 20px; left: 150px; z-index: 300;\">' ;
            ImgOverlayHTML +=   routeImageStyleStr ;
            ImgOverlayHTML +=   ' >' ;
            ImgOverlayHTML +=     '<img src=' + src ;
            ImgOverlayHTML +=     ' id=\"webMapImg\"';
            ImgOverlayHTML +=     ' alt=\"'+alt+'\"';
            ImgOverlayHTML +=     ' class=\"map\" width=\"500px\" height=250' ;
            ImgOverlayHTML +=     ' style=\"width: 160px maxwidth:25%; height: auto; ' ;
            /* ImgOverlayHTML +=     ' border-style: solid; border-width: 3px; border-color: darkblue; \" />' ; */
            ImgOverlayHTML +=     '\" />' ;
            ImgOverlayHTML +=   '</div>' ;
    //        console.log("ImgOverlayHTML="+ImgOverlayHTML) ;
        document.getElementById("routeDisplay").innerHTML = ImgOverlayHTML;  // ### not routeDisplayDivID?? ###
    //        document.getElementById(routeDisplayDivID).innerHTML = ImgOverlayHTML;
    }
    
    
    function FindIndexOfMenuOption(optionText, Menu) {
        for (i=0; i<Menu.options.length; i++) {
            if (Menu.options[i].text == optionText) {
                return i
            }
        }
        return -1 ;
    }
    
    function ChangeSectionStatesList() {
    //function UpdateCountrySectionsList() {
        BuildNewCountriesListFromSelectedRegion() ;
    }
    
    function BuildNewCountriesListFromSelectedRegion() {
        BuildNewNextLevelMenuListFromThisLevelMenuSelection(["countrySection", "sectionState"], ["DestinationSection", "DestinationState"],"regionAndCountries") ;
    }
    
    // add user option iff option 3 value=="UserProvided"
    function BuildNewNextLevelMenuListFromThisLevelMenuSelection(menuIDs, localStorageNames, menuOptionsSource) {
        if(menuIDs.length>=2) {
              //alert("BuildNewNextLevelMenuListFromThisLevelMenuSelection()") ;
              var thisLevelMenuList = document.getElementById(menuIDs[0]);
              console.log("$$$1:thisLevelMenuList[0].text =="+thisLevelMenuList[0].text+"$$$") ;
    /*  ### there should not be any resetting of the indices here ###
    */
              //var currentLevelMenuSelection = thisLevelMenuList.options[thisLevelMenuList.selectedIndex].value;
              //var currentLevelMenuSelection = thisLevelMenuList.options[thisLevelMenuList.selectedIndex].text;
              //var currentLevelMenuSelection = eval('localStorage.'+localStorageNames[0]);
              var currentLevelLocalStorage = eval('localStorage.'+localStorageNames[0]) ;
              //var currentLevelMenuSelectionIndex = FindIndexOfMenuOption(currentLevelLocalStorage, thisLevelMenuList) ;
              var currentLevelMenuSelectionIndex = thisLevelMenuList.selectedIndex;
              var currentLevelMenuSelection ;
              if(currentLevelMenuSelectionIndex<2) { // if Index undefined or category header or unknown, use category header
                  thisLevelMenuList.selectedIndex = 0 ;
              }
            /*  review and decide if want this
              else {
                  thisLevelMenuList.selectedIndex = currentLevelMenuSelectionIndex ;
              }
            */
              currentLevelMenuSelection = thisLevelMenuList.options[thisLevelMenuList.selectedIndex].text ;
              console.log("BuildNewNextLevelMenuListFromThisLevelMenuSelection(menuIDs== "+menuIDs+")") ;
              console.log("thisLevelMenuList ==document.getElementById(menuIDs[0]) =="+thisLevelMenuList) ;
              console.log("currentLevelMenuSelection =="+currentLevelMenuSelection) ;
              console.log("thisLevelMenuList.selectedIndex =="+thisLevelMenuList.selectedIndex) ;
              console.log("$$$2:thisLevelMenuList[0].text =="+thisLevelMenuList[0].text+"$$$") ;
    
              console.log("eval string == "+'localStorage.'+localStorageNames[0]+'="'+currentLevelMenuSelection+'"') ;
              eval('localStorage.'+localStorageNames[0]+'="'+currentLevelMenuSelection+'"');
    
              // Previously:
              // no matter what this level changes to, all lower levels perforce have to become "Unk"
    /*
              if(true | currentLevelMenuSelection!='Unk') {
                  for (i = 1; i<localStorageNames.length; i++) {
                      eval('localStorage.'+localStorageNames[i]+'="Unk"');
                  }
              }
    */
    //          if(true | currentLevelMenuSelection!='Unk') {
    
    //              regionAndCountries['SouthAsia'].includes("South-eastern Asia")
    //              "regionAndCountries"[localStorageNames[0]].includes(localStorageNames[0])
    //              menuOptionsSource
    /*
    ##########
    ##########
    */
    
              for (i = 1; i<localStorageNames.length; i++) {
                  // if the current selection of the next level is a member of the current level, then keep it
                      console.log("regionAndCountries[localStorage."
                            +localStorageNames[0]
                            +"].includes(localStorage."
                            +localStorageNames[1]
                            +")") ;
                   if(
                      eval("regionAndCountries[localStorage."
                            +localStorageNames[0]
                            +"].includes(localStorage."
                            +localStorageNames[1]
                            +")")
                       ) {
                        // no-op
                   }
                   else {
                    eval('localStorage.'+localStorageNames[i]+'="Unk"');
                   }
              }
              // get *current* unupdated countrylist
              var nextLevelMenuList ;
              // First two elements of the choice list are always the no-op header and the "Unknown" option
              var titleNoOpOption ;
              var unkOption ;
              var userProvidedOptions ;
              var nextLevelSourceElementsList ;
              var nextLevelMenuListLength ;
              var nextLevelMenuSelection = eval('localStorage.'+localStorageNames[1]) ;
              // initially set the selection of the lower level menu to the category description
              nextLevelMenuList = document.getElementById(menuIDs[1]);
              nextLevelMenuList.selectedIndex = 0 ;
              console.log("nextLevelMenuList = "+nextLevelMenuList) ;
              console.log("nextLevelMenuList: current selection = "+nextLevelMenuList[nextLevelMenuList.selectedIndex].text) ;
            /*
             * can currentLevelMenuSelection ever be blank or unknown?
             * [prob not if coming in from another page.  But prob yes if in a recursive call.  Use to implement propogation of "Unknown"'s?]
            */
    
              console.log("$$$3: thisLevelMenuList[0].text =="+thisLevelMenuList[0].text+"$$$") ;
    
                if (currentLevelMenuSelection=="") {
                    console.log("Empty actions (i.e. value) selected.  Noop") ;
                    //alert("Noop") ;
                }
                // handle "Unk" as just another value (that doesn't happen to have a defined set of sub-options)
    /*
                else if (currentLevelMenuSelection=="Unk") {
                    AcceptCurrentOrigins() ;
                    //alert("Exit") ;
                }
    */
                else {
                  // Keep the first two options as in orig code, but here just remove all and add the first two back in.
                  titleNoOpOption = nextLevelMenuList[0];
                  unkOption = nextLevelMenuList[1];
                  if (nextLevelMenuList.length>2) {
                      if(nextLevelMenuList[2]=="UserProvided"){
                        userProvidedOptions = nextLevelMenuList[2] ;
                      }
                      else {
                        userProvidedOptions = false ;
                      }
                  }
                  nextLevelMenuListLength = nextLevelMenuList.options.length ;
                  for (i = 0; i<nextLevelMenuListLength; i++) {
                    console.log("removing "+nextLevelMenuList.options[0].text) ;
                    nextLevelMenuList.remove(0);
                  }
              // First two elements of the choice list are always the no-op header and the "Unknown" option
                  nextLevelMenuList.options.add(titleNoOpOption);
                  console.log("added nextLevelMenuList.options[0].text=="+nextLevelMenuList.options[0].text) ;
                  nextLevelMenuList.options.add(unkOption);
                  console.log("added nextLevelMenuList.options[1].text=="+nextLevelMenuList.options[1].text) ;
                  if(userProvidedOptions) {
                    nextLevelMenuList.options.add(userProvidedOptions);
                    console.log("added nextLevelMenuList.options[2].text=="+nextLevelMenuList.options[2].text) ;
                  }
    
                  console.log("currentLevelMenuSelection=="+currentLevelMenuSelection) ;
                  console.log("nextLevelSourceElementsList = "+eval(menuOptionsSource+'["'+currentLevelMenuSelection+'"]')) ;
                  nextLevelSourceElementsList = eval(menuOptionsSource+'["'+currentLevelMenuSelection+'"]');
                  if (nextLevelSourceElementsList) {
                    for (i = 0; i < nextLevelSourceElementsList.length; i++) {
                      var nextLevelSourceElement = new Option(nextLevelSourceElementsList[i], nextLevelSourceElementsList[i]);
                      //var nextLevelSourceElement = new Option(nextLevelSourceElementsList[i], i+2);
                      nextLevelMenuList.options.add(nextLevelSourceElement);
                      console.log("added nextLevelSourceElement.value=="+nextLevelSourceElement.value+". new nextLevelMenuList value: "+nextLevelMenuList.options[i+2]) ;
            /*
            */
                      if (nextLevelSourceElement.value==nextLevelMenuSelection) {
                          // add two because have two addl options at the front of the list
                          console.log(">>>nextLevelSourceElementsList["+nextLevelSourceElementsList[i]+"] Selection=="+nextLevelMenuSelection+"; selected index =="+i) ;
                          nextLevelMenuList.selectedIndex = i;
                          nextLevelMenuList.value = nextLevelMenuSelection;
                      }
                    }
                  }
                // Always set next menu selection to category heading, since prev higher category has changed
                // (But might want to consider unions of lower level if higher leve is unknown)
    //            nextLevelMenuList.selectedIndex = 0 ;
    
                //### check this...###
                //### need to do this no matter what the menu choice was...EchoDestinationTextBoxL2() ;
    /* would like these recursive calls to handle all menu builds at once
                menuIDs.shift() ;
                BuildNewNextLevelMenuListFromThisLevelMenuSelection(menuIDs, menuOptionsSource) ;
    */
                }
            EchoDestinationTextBoxL2() ; // "EchoOriginsTextBoxL1() ;" in the original
            EchoCurrentDestinationEntries() ;
            updateDestinationMenuHeadings() ;
        }
    }
    // ]]></script>
    <script>// <![CDATA[
    add_map_of_the_times() ;
    
    /*
     * Need to first set up the country-Sections menu
    */
    UpdateCountrySectionsList() ;
    
    
    
    EchoCurrentDestinationEntries() ;
    EchoDestinationTextBoxL2() ;
    
    //ChangeSectionStatesList() ;
    
    updateDestinationMenuHeadings() ;
    // ]]></script>

      </div>
  
    </div>
  
  </div>