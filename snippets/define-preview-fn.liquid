<!-- 
    PreviewFn -- The Story So Far...
    page.initialize-jimaworks
    Jan 14 2019: interactive scaling solution
    Jan 14 2019:2031 text box etc alignments
    Jan 15 2019:2031 control buttons:"Buy" button to pogodan product page
    Feb 08 2019:0858 RBG to text color codes (#ffffff== white #FF0000==red>>DarkGreenified red borders)
    Feb 15 2019:1611 fn-ify the Preview page so can unify all functionality in define-prev and propagate uniformly.  white>>Ivory; green>>darkgreen
    Feb 17 2019:2000 edits for all text boxes except variable-length plaque
    Feb 18 2019:1700 edits for variable-length plaque
    Feb 19 2019:1000 edit to make "Back" function work in editing contexts
    Feb 21 2019:1000 adding "DeleteLastLine" function to text box edits
    Mar 02 2019:1000 debugged large-shipPic-at-bottom-of-page phenomenon (### but first appearance of ship is small###)
    Mar 14 2019:1100 Restore the seascape option
    Apr 07 2019:1115 Center plaque text in plaque image and repair plaque double size increases
    rltnShpDisplayFns --        
    page.initialize-jimaworks
    Edit code for #2.2 Dynamic Flow Jima Edit 18-06:  Snippet.
    Jun 07 2019:0900 Break define-preview-fns into set of more compact function calls:  generatePlaqueHTML()
    Jun 08 2019:1230 Change *ProductAnatomy to *TextBoxes and add *TripVisuals
    Jun 09 2019:1600 Incorporate map background choices/displays/edits.
    Jun 11 2019:1500 Polish "LookAndFeel" options from "showTripVisuals".
    Jun 14 2019:1100 replace "showTripVisuals" and "showTextBoxes" functions with "describeTripVisuals" and "describeTextBoxes"
    Jun 17 2019:0615 Fix showTextBoxes" header and turn off default seascape
    Jul 14 2019:0700 Add RelationShipsPreviewZ("highlightTitle", "showFrame") ;
    Aug 11 2019:0945 Fixed undefined webPlaqueText initialization
-->

<script>// <![CDATA[
    var showTextBoxSVG = false;
    var minTextBoxWidth = 30;
    var currentPreviewScale = 1.0;
    var previewScaleMultiple = 1.25;  // ### globalize? ###
    // start small...
    currentPreviewScale /= previewScaleMultiple;

    function getImgWidthAndHeight(url, callback) {
        var img = new Image();
        img.src = url;
        img.onload = function () { callback(this.width, this.height); }
    }

    /*
                var shipImg = webMapImg;
                img.src = shipImg;
                shipX = img.width ;
                shipY = img.height ;
                console.log("shipImg=="+shipImg+" shipX=="+shipX+" shipY=="+shipY) ; //  ### not working ###
    */

    function IncreasePreviewScaleMultiple() {
        currentPreviewScale = currentPreviewScale * previewScaleMultiple;
        RelationShipsPreviewZ("mockup", "showFrame", "BuyButton", "SaveButton", "ReturnButton");
    }

    function DecreasePreviewScaleMultiple() {
        currentPreviewScale = currentPreviewScale / previewScaleMultiple;
        RelationShipsPreviewZ("mockup", "showFrame", "BuyButton", "SaveButton", "ReturnButton");
    }

    function ReturnToCallingPage() {
        window.location.href = document.referrer;
    }

    function BackToPrevLevel(previewRole) {
        //alert("BackToPrevLevel(previewRole[="+previewRole+"]") ;
        if (previewRole === "editTitle") {
            RelationShipsPreviewZ("edit", "showFrame");
        }
        //### ? ###
        else if (previewRole === "highlightTitle") {
            RelationShipsPreviewZ("highlightTitle", "showFrame");
        }
        else if (previewRole === "editOrigin") {
            RelationShipsPreviewZ("edit", "showFrame");
        }
        else if (previewRole === "editDestination") {
            RelationShipsPreviewZ("edit", "showFrame");
        }
        else if (previewRole === "editShipInfo") {
            RelationShipsPreviewZ("edit", "showFrame");
        }
        else if (previewRole === "editPlaque") {
            RelationShipsPreviewZ("edit", "showFrame");
        }
        else {
            ReturnToCallingPage();
        }
    }

    function SaveCurrentState() {
        window.location.href = "' + window.location.host + '/pages/saveandreturnlater";
    }

    function GoToBuyPage() {
        window.location.href = "' + window.location.host + '/products/pogo-ship"; //"' + window.location.host + '/cart" ;
    }

    function FeaturesPage() {
        window.location.href = "' + window.location.host + '/pages/product-anatomy";
    }

    function SizePage() {
        window.location.href = "' + window.location.host + '/pages/product-sizes";
    }

    function PricePage() {
        window.location.href = "' + window.location.host + '/pages/prices";
    }

    function EditPage() {
        // alert("(Edit page not implemented yet)") ;
        RelationShipsPreviewZ("edit", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function editTitleTextBox() {
        RelationShipsPreviewZ("editTitle", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function enterTitleText() {
        var titleTextBoxEntry1;
        var titleTextBoxEntry2;
        var titleTextBoxEntry3;

        titleTextBoxEntry1 = document.getElementById("enterTitleLine1").value;
        titleTextBoxEntry2 = document.getElementById("enterTitleLine2").value;
        titleTextBoxEntry3 = document.getElementById("enterTitleLine3").value;

        // ### How does this work.  Is a div/spann with this id supposed to lie in the environment?
        document.getElementById("titleTextBoxL1").innerHTML = titleTextBoxEntry1;
        document.getElementById("titleTextBoxL2").innerHTML = titleTextBoxEntry2;
        document.getElementById("titleTextBoxL3").innerHTML = titleTextBoxEntry3;

        localStorage.TitleLine1 = titleTextBoxEntry1;
        localStorage.TitleLine2 = titleTextBoxEntry2;
        localStorage.TitleLine3 = titleTextBoxEntry3;

        //alert('current title line 1=='+localStorage.TitleLine1+'; title line 2=='+localStorage.TitleLine2+'; title line 2=='+localStorage.TitleLine3) ;

    }

    function editOriginTextBox() {
        RelationShipsPreviewZ("editOrigin", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function enterOriginText() {
        var originTextBoxEntry1;
        var originTextBoxEntry2;

        originTextBoxEntry1 = document.getElementById("enterOriginLine1").value;
        originTextBoxEntry2 = document.getElementById("enterOriginLine2").value;

        document.getElementById("OriginTextBoxL1").innerHTML = originTextBoxEntry1;
        document.getElementById("OriginTextBoxL2").innerHTML = originTextBoxEntry2;

        localStorage.originsTextBoxL1 = originTextBoxEntry1
        localStorage.originsTextBoxL2 = originTextBoxEntry2;
    }

    function editDestinationTextBox() {
        RelationShipsPreviewZ("editDestination", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function enterDestinationText() {
        var destinationTextBoxEntry1;
        var destinationTextBoxEntry2;

        destinationTextBoxEntry1 = document.getElementById("enterDestinyLine1").value;
        destinationTextBoxEntry2 = document.getElementById("enterDestinyLine2").value;

        document.getElementById("DestinationTextBoxL1").innerHTML = destinationTextBoxEntry1;
        document.getElementById("DestinationTextBoxL2").innerHTML = destinationTextBoxEntry2;

        localStorage.DestinyLine1 = destinationTextBoxEntry1;
        localStorage.DestinyLine2 = destinationTextBoxEntry2;
    }

    function editShipInfoTextBox() {
        RelationShipsPreviewZ("editShipInfo", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function enterShipInfoText() {   // ### Three? ###
        var shipInfoTextBoxEntry1;
        var shipInfoTextBoxEntry2;

        shipInfoTextBoxEntry1 = document.getElementById("enterShipInfoLine1").value;
        shipInfoTextBoxEntry2 = document.getElementById("enterShipInfoLine2").value;

        document.getElementById("shipInfoTextBoxL1").innerHTML = shipInfoTextBoxEntry1;
        document.getElementById("shipInfoTextBoxL2").innerHTML = shipInfoTextBoxEntry2;

        localStorage.ShipInfoLine1 = shipInfoTextBoxEntry1;
        localStorage.ShipInfoLine2 = shipInfoTextBoxEntry2;
    }

    function editPlaqueTextBox() {
        RelationShipsPreviewZ("editPlaque", "showFrame", "BuyButton", "SaveButton", "ReturnButton");  // ### RetunButton? ###
    }

    function enterPlaqueText(lineNumber, newText) {
        //alert('enterPlaqueText(): lineNumber='+lineNumber+' newText='+newText)                
        var numAvailPlaqueLines = 8;
        var localStoragePlaqueLineStr;
        var plaqueTextBoxEntryStr;
        var getElementByIdStr;
        var PlaqueLineStr;
        for (i = 1; i <= numAvailPlaqueLines; i++) {
            localStoragePlaqueLineStr = 'localStorage.PlaqueLine' + i;
            plaqueTextBoxEntryStr = 'enterPlaqueLine' + i;
            getElementByIdStr = 'plaqueTextBoxL' + i;
            PlaqueLineStr = 'PlaqueLine' + i;
            //alert('enterPlaqueText(): localStoragePlaqueLineStr ='+localStoragePlaqueLineStr+' plaqueTextBoxEntryStr ='+ plaqueTextBoxEntryStr+'PlaqueLineStr='+PlaqueLineStr) ;
            //alert("eval(localStoragePlaqueLineStr+' !== undefined')"+eval(localStoragePlaqueLineStr+' !== undefined'));
            //alert("eval(localStoragePlaqueLineStr+' !== \"undefined\"')"+eval(localStoragePlaqueLineStr+' !== "undefined"'));
            if (
                (localStoragePlaqueLineStr !== undefined)
                & (localStoragePlaqueLineStr !== "undefined")
            ) {
                plaqueTextBoxEntry = document.getElementById(plaqueTextBoxEntryStr).value;
                //alert('enterPlaqueText(): plaqueTextBoxEntry='+plaqueTextBoxEntry) ;
                document.getElementById('plaqueTextBoxL' + i).innerHTML = plaqueTextBoxEntry;
                localStorage['PlaqueLine' + i] = plaqueTextBoxEntry;
            }
            // add new line if there is one
            /*
            */
            else if (newText) {
                plaqueTextBoxEntry = document.getElementById(plaqueTextBoxEntryStr).value;
                document.getElementById(plaqueTextBoxL + i).innerHTML = plaqueTextBoxEntry;
                localStorage['PlaqueLine' + i] = plaqueTextBoxEntry;
                //alert("enterPlaqueText(): plaqueTextBoxEntry ="+plaqueTextBoxEntry)
            }
        }
        /*                               
                        var plaqueTextBoxEntry1 ;
                        var plaqueTextBoxEntry2 ;
                        var plaqueTextBoxEntry3 ;
                        var plaqueTextBoxEntry4 ;
                        var plaqueTextBoxEntry5 ;
                        var plaqueTextBoxEntry6 ;
                        var plaqueTextBoxEntry7 ;
        
                        plaqueTextBoxEntry1 = document.getElementById("enterPlaqueLine1").value;
                        plaqueTextBoxEntry2 = document.getElementById("enterPlaqueLine2").value;
                        plaqueTextBoxEntry3 = document.getElementById("enterPlaqueLine3").value;
                        plaqueTextBoxEntry4 = document.getElementById("enterPlaqueLine4").value;
                        plaqueTextBoxEntry5 = document.getElementById("enterPlaqueLine5").value;
                        plaqueTextBoxEntry6 = document.getElementById("enterPlaqueLine6").value;
                        plaqueTextBoxEntry7 = document.getElementById("enterPlaqueLine7").value;
                        
                        document.getElementById("plaqueTextBoxL1").innerHTML = plaqueTextBoxEntry1;
                        document.getElementById("plaqueTextBoxL2").innerHTML = plaqueTextBoxEntry2;
                        document.getElementById("plaqueTextBoxL3").innerHTML = plaqueTextBoxEntry3;
                        document.getElementById("plaqueTextBoxL4").innerHTML = plaqueTextBoxEntry4;
                        document.getElementById("plaqueTextBoxL5").innerHTML = plaqueTextBoxEntry5;
                        document.getElementById("plaqueTextBoxL6").innerHTML = plaqueTextBoxEntry6;
                        document.getElementById("plaqueTextBoxL7").innerHTML = plaqueTextBoxEntry7;
                        
                        localStorage.PlaqueLine1 = plaqueTextBoxEntry1 ;
                        localStorage.PlaqueLine2 = plaqueTextBoxEntry2 ;
                        localStorage.PlaqueLine3 = plaqueTextBoxEntry3 ;
                        localStorage.PlaqueLine4 = plaqueTextBoxEntry4 ;
                        localStorage.PlaqueLine5 = plaqueTextBoxEntry5 ;
                        localStorage.PlaqueLine6 = plaqueTextBoxEntry6 ;
                        localStorage.PlaqueLine7 = plaqueTextBoxEntry7 ;
        */
    }

    function describeMap() {
        var tripVisualsText = '';
        tripVisualsText += 'The map background for the RelationShips® project ';
        tripVisualsText += 'is historically-specific map or the time you specify ';
        tripVisualsText += 'as the time of the crossing you are commemorating.  ';
        tripVisualsText += 'You will be able to chose among five different color schemes ';
        tripVisualsText += 'for your map background.'
        alert(tripVisualsText);
    }

    function describeOrigins() {
        var tripVisualsText = '';
        tripVisualsText += 'While the "Origins Text Box" provides two lines ';
        tripVisualsText += 'for you to commemorate your relation\'s crossing, ';
        tripVisualsText += 'the Origins visual will highlight the Country of Origin ';
        tripVisualsText += 'that you specify in specifying that text box.';
        alert(tripVisualsText);
    }

    function describeDestination() {
        var tripVisualsText = '';
        tripVisualsText += 'While the "Destination Text Box" provides two lines ';
        tripVisualsText += 'for you to commemorate where your relations ended up, ';
        tripVisualsText += 'the Destination visual will highlight the destination state ';
        tripVisualsText += 'that you specify in specifying the Destination text box.';
        alert(tripVisualsText);
    }

    function describeRoute() {
        var tripVisualsText = '';
        tripVisualsText += 'Your RelationShips® product focuses on a specific crossing to America ';
        tripVisualsText += 'of one of the branches of your family.  ';
        tripVisualsText += 'The Route visual draws the sea (or air) route most likely used ';
        tripVisualsText += 'in the crossing, and is shown from the port o area of departure that you specify.';
        tripVisualsText += 'to the port or area of arrival that you describe.';
        alert(tripVisualsText);
    }

    function describeShip() {
        var tripVisualsText = '';
        tripVisualsText += 'Your RelationShips® product includes a depiction ';
        tripVisualsText += 'of exactly the ship of your relation\'s crossing, if you know it.  ';
        tripVisualsText += 'If you don\'t know it, jimaworks may be able to help you find it, ';
        tripVisualsText += 'and if there is no image of it jimaworks will render ';
        tripVisualsText += 'a beautiful facsimile from research.';
        tripVisualsText += 'If we cannot determine the ship,';
        tripVisualsText += 'jimaworks will research and present options of the most likely ship or kind of ship taken.';
        alert(tripVisualsText);
    }

    function describeSeaScape() {
        var tripVisualsText = '';
        tripVisualsText += 'jimaworks offers to set the ship image in a seascape. ';
        tripVisualsText += 'The seascape was experimentally discovered ';
        tripVisualsText += 'as a way to add dramatic impact to the visual presentation ';
        tripVisualsText += 'of your commemoration.';
        alert(tripVisualsText);
    }

    function describeTitleTextBox() {
        var tripVisualsText = '';
        tripVisualsText += 'The Title TextBox of your RelationShips® project ';
        tripVisualsText += 'tells the viewer what this is - e.g., your family name\'s establishment in America. ';
        tripVisualsText += 'We generate the first two lines automatically from your entries - a "What" line and a "When" line.  ';
        tripVisualsText += 'You will be able change the entries to anything you want before completing your order, ';
        tripVisualsText += 'and we provide a third line if you need it.'
        alert(tripVisualsText);
    }

    function describeOriginsTextBox() {
        var tripVisualsText = '';
        tripVisualsText += 'The "Origins Text Box" provides two lines ';
        tripVisualsText += 'for you to commemorate your relation\'s crossing.  ';
        tripVisualsText += 'These are generated automatically from your entries.  ';
        tripVisualsText += 'The first line is generated from your entries to the Country of Origin page.  ';
        tripVisualsText += 'The second is generated from your entries to the Port of Departure page.  ';
        tripVisualsText += 'You may of course change to anything you want before you complete your order.';
        alert(tripVisualsText);
    }

    function describeDestinationTextBox() {
        var tripVisualsText = '';
        tripVisualsText += 'The "Destination Text Box" provides two lines ';
        tripVisualsText += 'for you to commemorate your relation\'s landfall in America.  ';
        tripVisualsText += 'These are generated automatically from your entries.  ';
        tripVisualsText += 'The first line is generated from your entries to the Port of Entry page.  ';
        tripVisualsText += 'The second is generated from your entries to the Destination page.  ';
        tripVisualsText += 'You may of course change to anything you want before you complete your order.';
        alert(tripVisualsText);
    }


    function describeShipInfoTextBox() {
        var tripVisualsText = '';
        tripVisualsText += 'Your RelationShips® product focuses on a specific crossing to America ';
        tripVisualsText += 'of one of the branches of your family.  ';
        tripVisualsText += 'The TripInfo Text Box presents information that conveys something about the nature of the voyage.';
        tripVisualsText += 'The first line is usually generated from information about the physical size of the ship used in the voyage.  ';
        tripVisualsText += 'The second is generated from information about the passengers it carried.  ';
        tripVisualsText += 'You may of course change to anything you want before you complete your order.';
        alert(tripVisualsText);
    }

    function describePlaqueTextBox() {
        var tripVisualsText = '';
        tripVisualsText += 'Your RelationShips® product includes an inset plaque on which you may list those who cross in this voyage.';
        tripVisualsText += 'of exactly the ship of your relation\'s crossing, if you know it.  ';
        tripVisualsText += 'We provide eight lines for listing those of your relations making this voyage.  ';
        tripVisualsText += 'You may of use the plaque in many ways (of which the examples provide an incomplete sampling).';
        alert(tripVisualsText);
    }

    function removeLastLine(previewRole) {
        var numTxtBoxLines;
        var currentLocalStoreName;

        if (previewRole == "editPlaque") {
            localStoreNamePrefix = "PlaqueLine";
            numTxtBoxLines = 8;
        }
        else if (previewRole == "editShipInfo") {
            localStoreNamePrefix = "ShipInfoLine";
            numTxtBoxLines = 3;
        }
        else if (previewRole == "editDestination") {
            localStoreNamePrefix = "DestinyLine";
            numTxtBoxLines = 2;
        }
        else if (previewRole == "editOrigin") {
            localStoreNamePrefix = "originsTextBoxL";
            numTxtBoxLines = 2;
        }
        else if (previewRole == "editTitle") {
            localStoreNamePrefix = "TitleLine";
            numTxtBoxLines = 3;
        }
        else {
            alert('removeLastLine(' + previewRole + '): "' + localStoreNamePrefix + '" is not a recognized text box');
        }
        lastFilledLine = 0

        for (i = 1; i <= numTxtBoxLines; i++) {
            currentLocalStoreName = localStoreNamePrefix + i;
            currentLocalStore = localStorage[currentLocalStoreName];

            console.log('removeLastLine(' + previewRole + '): testing localStorage.' + localStoreNamePrefix + i + '==' + currentLocalStore);

            if (
                (currentLocalStore !== undefined)
                & (currentLocalStore !== "undefined")
            ) {
                lastFilledLine++;
                console.log('removeLastLine(' + previewRole + '): "' + currentLocalStoreName + '" Clause1');
            }
            else if (currentLocalStore !== undefined) {
                lastFilledLine++;
                console.log('removeLastLine(' + previewRole + '): "' + currentLocalStoreName + '" Clause2');
            }
            else if (currentLocalStore !== "undefined") {
                lastFilledLine++;
                console.log('removeLastLine(' + previewRole + '): "' + currentLocalStoreName + '" Clause3');
            }
            else {
                console.log('removeLastLine(' + previewRole + '): "' + currentLocalStoreName + '" Clause4');
            }
        } // for
        console.log('removeLastLine(' + previewRole + '): "' + localStoreNamePrefix + '". lastFilledLine==' + lastFilledLine + '. Evalling: (localStorage.' + localStoreNamePrefix + lastFilledLine + ' = undefined)');

        // To remove the key/value pair entirely:
        // localStorage.removeItem( localStoreNamePrefix + lastFilledLine );
        localStorage.setItem( localStoreNamePrefix + lastFilledLine, '' );

        RelationShipsPreviewZ("mockup", "showFrame", "BuyButton", "SaveButton", "ReturnButton");
    }

    function acceptEdits() {
        RelationShipsPreviewZ("mockup", "showFrame", "BuyButton", "SaveButton", "ReturnButton");
    }
 // ]]></script>

<script>

    function generateTitleTextBoxHTML(webFrameScale, showTextBoxSVG) {
        var titleTextBoxFontSize, titleTextBoxLineHeight;
        var titleTextBoxTopOffset, titleTextBoxLeftOffset;  // bottom vs top
        var webTitleAttribs = '';
        var webTitleTextBoxDivStyle = '';
        var webTitleText = '';
        var numAvailTitleLines, numFilledTitleLines;
        var titleTextBoxWidth, titleTextBoxHeight;
        var showExtraLine;
        var textBoxSVG = "";
        var titleHTML = '';
        var currentTitleLine;

        titleTextBoxFontSize = 12 * webFrameScale;
        titleTextBoxLineHeight = 0.8 * webFrameScale;
        //titleTextBoxBottomOffset = 15 * webFrameScale;
        titleTextBoxTopOffset = 22 * webFrameScale;
        titleTextBoxLeftOffset = 85 * webFrameScale;
        //webTitleTextBoxWidth = ;
        //webTitleTextBoxHeight = ;
        var minTitleTextLn = minTextBoxWidth;

        //ImgOverlayHTML +=   '<div style=\"position: absolute; top: '+titleTextBoxTopOffset+'px; left: '+titleTextBoxLeftOffset+'px; z-index: 25; line-height: '+titleTextBoxLineHeight+'; font-size: '+titleTextBoxFontSize+'px; text-align: center; \">' ;
        webTitleTextBoxDivStyle = ' style=\"position: absolute; top: ' + titleTextBoxTopOffset + 'px; left: ' + titleTextBoxLeftOffset + 'px; z-index: 25; line-height: ' + titleTextBoxLineHeight + '; font-size: ' + titleTextBoxFontSize + 'px; text-align: center; \"';
        webTitleText += '<p>';
        numFilledTitleLines = 0;
        numAvailTitleLines = 2; // ### draw this from some other place... ###
        showExtraLine = true;
        for (i = 1; i < numAvailTitleLines + 1; i++) {
            currentTitleLine = localStorage['TitleLine' + i];

            // horizontal lines
            if (i > 1) webTitleText += '<br>';
            // use current value of text box lines if there is a value
            if (
                (currentTitleLine !== undefined)
                & (currentTitleLine !== "undefined")
            ) {
                webTitleText += '<span id="TitleTextBoxL' + i + '">' + currentTitleLine + '</span></em>';  // ### </em> ? ###
                numFilledTitleLines++;
            }
            // else blank lines
            else if (showExtraLine) {
                webTitleText += '<span id="TitleTextBoxL' + i + '">' + ' ' + '</span></em>';
                showExtraLine = false;
            }
        }
        webTitleText += '</p>';
        if (showTextBoxSVG) { //localStorage.viewingTripVisuals) {
            for (i = 1; i < numAvailOriginLines + 1; i++) {
                titleTextBoxWidth = Math.max(titleTextBoxWidth, localStorage['originsTextBoxL' + i].length);
            }
            titleTextBoxHeight = numAvailTitleLines * titleTextBoxFontSize * titleTextBoxLineHeight;
            //textBoxSVG +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 10000;\">' ;
            textBoxSVG += '<svg width="' + titleTextBoxWidth + '" height="' + titleTextBoxHeight + '">';
            //textBoxSVG +=  '<circle cx="0" cy="0" r="100" stroke="green" stroke-width="10" fill="yellow" />' ;
            textBoxSVG += '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />';
            textBoxSVG += '<text x="0" y="15" fill="red">ShipInfoTextBox</text>';
            textBoxSVG += 'Sorry.  Unable to draw.  Your browser does not support SVG graphics';
            textBoxSVG += '</svg>';
            //textBoxSVG +=   '</div>' ;
        };
        titleHTML += '<div' + webTitleTextBoxDivStyle + '/>';
        titleHTML += webTitleText;
        titleHTML += textBoxSVG;
        titleHTML += '</div>';
        console.log("titleHTML==" + titleHTML);
        return titleHTML;
    };

</script>
<script>

    function generateOriginTextBoxHTML(webFrameScale, showTextBoxSVG) {
        var originTextBoxFontSize, originTextBoxLineHeight;
        var originTextBoxTopOffset, originTextBoxLeftOffset;
        var webOriginAttribs = '';
        var webOriginTextBoxDivStyle = '';
        var webOriginText = '';
        //var webOriginTextBoxWidth, webOriginTextBoxHeight ;
        var numAvailOriginLines, numFilledOriginLines;
        var textBoxSVG = "";
        var showExtraLine;
        var originHTML = '';
        var currentOriginLine;

        originTextBoxFontSize = 8 * webFrameScale;
        originTextBoxLineHeight = 0.8 * webFrameScale;
        originTextBoxTopOffset = 81 * webFrameScale;
        originTextBoxLeftOffset = 250 * webFrameScale;
        originTextBoxWidth = 0;
        originTextBoxHeight = 0;

        //ImgOverlayHTML +=   '<div style=\"position: absolute; top: '+departureTextBoxTopOffset+'px; left: '+departureTextBoxLeftOffset+'px; z-index: 25; line-height: '+departureTextBoxLineHeight+'; font-size: '+departureTextBoxFontSize+'px; text-align: left; \">' ;
        webOriginTextBoxDivStyle = ' style=\"position: absolute; top: ' + originTextBoxTopOffset + 'px; left: ' + originTextBoxLeftOffset + 'px; ';
        webOriginTextBoxDivStyle += ' z-index: 25; line-height: ' + originTextBoxLineHeight + '; font-size: ' + originTextBoxFontSize + 'px; text-align: left; \"';
        webOriginText += '<p>';
        numFilledOriginLines = 0;
        numAvailOriginLines = 2; // ### draw this from some other place... ###
        showExtraLine = true;

        for (i = 1; i < numAvailOriginLines + 1; i++) {
            currentOriginLine = localStorage['originsTextBoxL' + i]; // 
            // horizontal lines
            if (i > 1) webOriginText += '<br>';
            // use current value of text box lines if there is a value
            if (
                ( currentOriginLine !== undefined )
                & ( currentOriginLine !== "undefined" )
            ) {
                webOriginText += '<span id="OriginTextBoxL' + i + '">' + currentOriginLine + '</span></em>';  // ### </em> ? ###
                numFilledOriginLines++;
            }
            // else blank lines
            else if (showExtraLine) {
                webOriginText += '<span id="OriginTextBoxL' + i + '"> </span></em>';
                showExtraLine = false;
            }
        }
        webOriginText += '</p>';
        if (showTextBoxSVG) { //localStorage.viewingTripVisuals) {
            for (i = 1; i < numAvailOriginLines + 1; i++) {
                originTextBoxWidth = Math.max(originTextBoxWidth, localStorage['originsTextBoxL' + i].length);
            }
            originTextBoxHeight = numAvailOriginLines * originTextBoxFontSize * originTextBoxLineHeight;
            //textBoxSVG +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 10000;\">' ;
            textBoxSVG += '<svg width="' + originTextBoxWidth + '" height="' + originTextBoxHeight + '">';
            //textBoxSVG +=  '<circle cx="0" cy="0" r="100" stroke="green" stroke-width="10" fill="yellow" />' ;
            textBoxSVG += '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />';
            textBoxSVG += '<text x="0" y="15" fill="red">ShipInfoTextBox</text>';
            textBoxSVG += 'Sorry.  Unable to draw.  Your browser does not support SVG graphics';
            textBoxSVG += '</svg>';
            //textBoxSVG +=   '</div>' ;
        }
        originHTML += '<div' + webOriginTextBoxDivStyle + '/>';
        originHTML += webOriginText;
        originHTML += textBoxSVG;
        originHTML += '</div>';
        console.log("originHTML==" + originHTML);
        return originHTML;
    }

</script>
<script>


    function generateDestinationTextBoxHTML(webFrameScale, showTextBoxSVG) {
        var destinationTextBoxFontSize, destinationTextBoxLineHeight;
        var destinationTextBoxTopOffset, destinationTextBoxLeftOffset;
        var webDestinationAttribs = '';
        var webDestinationTextBoxDivStyle = '';
        var webDestinationText = '';
        //var webDestinationTextBoxWidth, webDestinationTextBoxHeight ;
        var maxLnOfFilledDestinationLines;  // ### should probably calculate and use to scale text
        var numFilledDestinationLines;
        var showExtraLine;
        var textBoxSVG = "";
        var destinationHTML = '';

        destinationTextBoxFontSize = 8 * webFrameScale;
        destinationTextBoxLineHeight = 0.8 * webFrameScale;
        destinationTextBoxBottomOffset = 60 * webFrameScale;
        destinationTextBoxLeftOffset = 25 * webFrameScale;
        destinationTextBoxWidth = 0;
        destinationTextBoxHeight = 0;

        //ImgOverlayHTML +=   '<div style=\"position: absolute; top: 60px; left: 25px; z-index: 25; line-height: 0.8;  font-size: 8px; \">' ;
        // ### note difference with ShiInfo - this is oriented to specify top and to text-align right ###
        webDestinationTextBoxDivStyle = ' style=\"position: absolute; top: ' + destinationTextBoxBottomOffset + 'px; left: ' + destinationTextBoxLeftOffset + 'px; z-index: 25; line-height: ' + destinationTextBoxLineHeight + '; font-size: ' + destinationTextBoxFontSize + 'px; text-align: right; \"';
        webDestinationText += '<p>';
        numFilledDestinationLines = 0;
        numAvailDestinationLines = 2; // ### draw this from some other place... ###
        showExtraLine = true;
        for (i = 1; i < numAvailDestinationLines + 1; i++) {
            // horizontal lines
            if (i > 1) webDestinationText += '<br>';
            // use current value of text box lines if there is a value
            if (
                (localStorage['DestinyLine' + i] !== undefined)
                & (localStorage['DestinyLine' + i] !== "undefined")
            ) {
                webDestinationText += '<span id="DestinationTextBoxL' + i + '">' + localStorage['DestinyLine' + i] + '</span></em>';  // ### </em> ? ###
                numFilledDestinationLines++;
            }
            // else blank lines
            else if (showExtraLine) {
                webDestinationText += '<span id="DestinationTextBoxL' + i + '">' + ' ' + '</span></em>';
                showExtraLine = false;
            }
        }
        webDestinationText += '</p>';
        if (showTextBoxSVG) { //localStorage.viewingTripVisuals) {
            for (i = 1; i < numAvailDestinationLines + 1; i++) {
                destinationTextBoxWidth = Math.max(destinationTextBoxWidth, localStorage['originsTextBoxL' + i].length);
            }
            destinationTextBoxHeight = numAvailDestinationLines * destinationTextBoxFontSize * destinationTextBoxLineHeight;
            //textBoxSVG +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 10000;\">' ;
            textBoxSVG += '<svg width="' + destinationTextBoxWidth + '" height="' + destinationTextBoxHeight + '">';
            //textBoxSVG +=  '<circle cx="0" cy="0" r="100" stroke="green" stroke-width="10" fill="yellow" />' ;
            textBoxSVG += '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />';
            textBoxSVG += '<text x="0" y="15" fill="red">ShipInfoTextBox</text>';
            textBoxSVG += 'Sorry.  Unable to draw.  Your browser does not support SVG graphics';
            textBoxSVG += '</svg>';
            //textBoxSVG +=   '</div>' ;
        }
        destinationHTML += '<div' + webDestinationTextBoxDivStyle + '/>';
        destinationHTML += webDestinationText;
        destinationHTML += textBoxSVG;
        destinationHTML += '</div>';
        console.log("destinationHTML==" + destinationHTML);
        return destinationHTML;
    }

</script>
<script>

    function generateShipInfoHTML(webFrameScale, showTextBoxSVG) {
        var shipInfoTextBoxFontSize, shipInfoTextBoxLineHeight;
        var shipInfoTextBoxTopOffset, shipInfoTextBoxLeftOffset;
        var webShipInfoAttribs = '';
        var webShipInfoTextBoxDivStyle = '';
        var webShipInfoText = '';
        //var webShipInfoTextBoxWidth, webShipInfoTextBoxHeight ;
        var maxLnOfFilledShipInfoLines;  // ### should probably calculate and use to scale text
        var numFilledShipInfoLines;
        var showExtraLine;
        var textBoxSVG = "";
        var shipInfoHTML = '';

        shipInfoTextBoxFontSize = 8 * webFrameScale;
        shipInfoTextBoxLineHeight = 0.8 * webFrameScale;
        shipInfoTextBoxBottomOffset = 20 * webFrameScale;
        shipInfoTextBoxLeftOffset = 115 * webFrameScale;
        //webShipInfoTextBoxWidth = ;
        //webShipInfoTextBoxHeight = ;

        shipInfoHTML += '<div style=\"position: absolute; bottom: ' + shipInfoTextBoxBottomOffset + 'px; left: ' + shipInfoTextBoxLeftOffset + 'px; z-index: 25; line-height: ' + shipInfoTextBoxLineHeight + '; font-size: ' + shipInfoTextBoxFontSize + 'px; text-align: center; \">';
        //shipInfoHTML +=   '<div style=\"position: absolute; bottom: 20px; left: 115px; z-index: 25; line-height: 0.8;  font-size: 8px; text-align: center; \">' ;
        shipInfoHTML += '<p><span id="shipInfoTextBoxL1">' + localStorage.ShipInfoLine1 + '</span></em>';
        shipInfoHTML += '<br><span id="shipInfoTextBoxL2">' + localStorage.ShipInfoLine2 + '</span></em></p>';
        shipInfoHTML += '</div>';

        // webShipInfoAttribs = ' class=\"Plaque\" width='+webShipInfoTextBoxWidth+'px height='+webShipInfoTextBoxHeight+'px' ;
        // webShipInfoTextBoxDivStyle = ' style=\"width:'+webShipInfoTextBoxWidth+'px; maxwidth: 25%;'+webShipInfoTextBoxHeight+'px;\";' ;
        webShipInfoTextBoxDivStyle = ' style=\"position: absolute; bottom: ' + shipInfoTextBoxBottomOffset + 'px; left: ' + shipInfoTextBoxLeftOffset + 'px; z-index: 25; line-height: ' + shipInfoTextBoxLineHeight + '; font-size: ' + shipInfoTextBoxFontSize + 'px; text-align: center; \"';
        webShipInfoText += '<p>';
        numFilledShipInfoLines = 0;
        numAvailShipInfoLines = 2; // ### draw this from some other place... ###
        showExtraLine = true;
        for (i = 1; i < numAvailShipInfoLines + 1; i++) {
            // horizontal lines
            if (i > 1) webShipInfoText += '<br>';
            // use current value of text box lines if there is a value
            if (
                (localStorage['ShipInfoLine' + i] !== undefined)
                & (localStorage['ShipInfoLine' + i] !== "undefined")
            ) {
                webShipInfoText += '<span id="ShipInfoTextBoxL' + i + '">' + localStorage['ShipInfoLine' + i] + '</span></em>';  // ### </em> ? ###
                numFilledShipInfoLines++;
            }
            // else blank lines
            else if (showExtraLine) {
                webShipInfoText += '<span id="ShipInfoTextBoxL' + i + '">' + ' ' + '</span></em>';
                showExtraLine = false;
            }
        }
        webShipInfoText += '</p>';
        if (showTextBoxSVG) { //localStorage.viewingTripVisuals) {
            for (i = 1; i < numAvailShipInfoLines + 1; i++) {
                shipInfoTextBoxWidth = Math.max(shipInfoTextBoxWidth, localStorage['originsTextBoxL' + i].length);
            }
            shipInfoTextBoxHeight = numAvailShipInfoLines * shipInfoTextBoxFontSize * shipInfoTextBoxLineHeight;
            //textBoxSVG +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 10000;\">' ;
            textBoxSVG += '<svg width="' + shipInfoTextBoxWidth + '" height="' + shipInfoTextBoxHeight + '">';
            //textBoxSVG +=  '<circle cx="0" cy="0" r="100" stroke="green" stroke-width="10" fill="yellow" />' ;
            textBoxSVG += '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />';
            textBoxSVG += '<text x="0" y="15" fill="red">ShipInfoTextBox</text>';
            textBoxSVG += 'Sorry.  Unable to draw.  Your browser does not support SVG graphics';
            textBoxSVG += '</svg>';
            //textBoxSVG +=   '</div>' ;
        }
        /*    
            if (true) { //localStorage.viewingTripVisuals) {
                plaqueHTML +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 100;\">' ;
                plaqueHTML +=   '<svg width="'+regionMapWidth+'" height="'+regionMapHeight+'">' ;
                plaqueHTML +=   '<circle cx="0" cy="0" r="50" stroke="green" stroke-width="4" fill="yellow" />' ;
                plaqueHTML +=   '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />' ;
                plaqueHTML +=   '<circle cx="'+regionMapWidth+'" cy="'+regionMapHeight+'" r="50" stroke="yellow" stroke-width="4" fill="green" />' ;
                plaqueHTML +=   '</svg>' ;
                plaqueHTML +=   '</div>' ;
            }
        */

        shipInfoHTML += '<div' + webShipInfoTextBoxDivStyle + '/>';
        shipInfoHTML += webShipInfoText;
        shipInfoHTML += textBoxSVG;
        shipInfoHTML += '</div>';
        console.log("shipInfoHTML==" + shipInfoHTML);
        return shipInfoHTML;
    }
</script>
<script>

    /* need:
 * webFrameScale
 * webFrameTopOffset
 * webFrameTopThickness
 * webMapHeight
 * numAvailPlaqueLines <doesn't appear here>
 * numFilledPlaqueLines
 * maxLnOfFilledPlaqueLines
 */
    function generatePlaqueHTML(
        webFrameScale,
        webFrameTopOffset,
        webFrameTopThickness, //webFrameBottomThickness not used
        webFrameHeight,
        webMapHeight,
        webMapWidth,
        numAvailPlaqueLines,
        numFilledPlaqueLines,
        maxLnOfFilledPlaqueLines,
        shopifyFilePrefix,
        showTextBoxSVG
    ) {
        var plaqueHTML = '';
        /* //https://cdn.shopify.com/s/files/1/1336/0641/files/EmptyPlaque.png */
        var webPlaque = "Empty";
        var webPlaqueDistanceBelowMapDisplay = 30 * webFrameScale;
        var webPlaqueImg, webPlaqueAbbrv, webPlaqueDivStyle, webPlaqueAttribs, webPlaqueStyle;
        var webPlaqueWidth, webPlaqueHeight;
        var webPlaqueBaseWidth, webPlaqueMatBorder;
        var webPlaqueTopOffset, webPlaqueBottomOffset, webPlaqueTextBottomOffset;
        var webPlaqueLeftOffset, webPlaqueRightOffset;
        var webPlaquewebStr, webPlaqueBottomOffsetStr, webPlaqueLeftOffsetStr;
        var plaqueTextBoxFontSize, plaqueTextBoxLineHeight, plaqueTextBoxLeftOffset, webPlaqueTextBoxDivStyle;
        webPlaqueBaseWidth = 140 + 10; //### adding 10 to coer previous plaque ###
        webPlaqueMatBorder = 6;  // ### was 4... 6? ###

        webPlaqueWidth = (webPlaqueBaseWidth + webPlaqueMatBorder) * webFrameScale;
        webPlaqueHeight = webPlaqueWidth / 2;
        //webPlaqueBottomOffset = -50;
        // ### Don't seem to be able to get this to work from the top ###
        //webPlaqueTopOffset = (webMapHeight + (webFrameBottomThickness/2)) - (webPlaqueHeight/2.0) ;
        //webPlaqueTopOffset = webMapHeight;
        webPlaqueTopOffset = webFrameTopOffset + webFrameTopThickness + webMapHeight + (webPlaqueHeight / 2.0);
        //webPlaqueBottomOffset = -(webPlaqueHeight + ((webFrameBottomThickness-webPlaqueHeight)/2.0));
        webPlaqueBottomOffset = -(webPlaqueHeight - webPlaqueDistanceBelowMapDisplay);
        //webPlaqueLeftOffset = 125 * webFrameScale ; /* 100+400/2-140/2 = 220... nope */
        // ### webPlaqueOffset seems to be defined twice - how often is this happening with these vars? ###
        // 100+400/2-140/2 = 220... nope
        webPlaqueLeftOffset = webMapWidth / 2 - webPlaqueWidth / 2;
        if (webPlaque == 'Empty') {
            webPlaqueAbbrv = 'Empty';
        }
        // ### no plaque ###
        else {
            webPlaqueAbbrv = 'NoPlaque';
        }
        //### *arbitrarily* adjusting font size###
        maxLnOfFilledPlaqueLines = maxLnOfFilledPlaqueLines / 2;
        webPlaqueImg = shopifyFilePrefix + webPlaque + 'Plaque.png';

        // plaqueTextBoxFontSize = webPlaqueHeight / (numFilledPlaqueLines + 1); //  *webFrameScale  ;   // 9*webFrameScale
        // console.log("plaqueTextBoxFontSize= webPlaqueHeight/(numFilledPlaqueLines+1))==" + plaqueTextBoxFontSize);
        // plaqueTextBoxFontSize = webPlaqueWidth / (maxLnOfFilledPlaqueLines + 2);
        // console.log("plaqueTextBoxFontSize= webPlaqueWidth/(maxLnOfFilledPlaqueLines+2))==" + plaqueTextBoxFontSize);
        // plaqueTextBoxFontSize = Math.min(webPlaqueHeight / (numFilledPlaqueLines + 1), webPlaqueWidth / (maxLnOfFilledPlaqueLines + 2)); //  *webFrameScale  ;   // 9*webFrameScale
        // console.log("plaqueTextBoxFontSize = Math.min((webPlaqueHeight/(numFilledPlaqueLines+1)),webPlaqueWidth/(maxLnOfFilledPlaqueLines+2)))==" + plaqueTextBoxFontSize);
        //### plaqueTextBoxLineHeight = webPlaqueHeight / numFilledPlaqueLines ;
        plaqueTextBoxFontSize = ( 9.25 * webFrameScale ) // 7.4, pair with px unit later

        plaqueTextBoxLineHeight = (webPlaqueHeight / numFilledPlaqueLines) * webFrameScale;
        plaqueTextBoxLineHeight = 1.0 * webFrameScale;

        /*
            webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; z-index: 10;\">' ;
            webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 10;\">' ;
            webPlaqueDivStyle = ' style=\"position: absolute; top:'+webPlaqueTopOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 10;\">' ;
        */
        //webPlaqueDivStyle =   'style=\"position: absolute; bottom: '+webPlaqueBottomOffset+'px; left: '+webPlaqueLeftOffset+'px; z-index: 25; line-height: '+plaqueTextBoxLineHeight+'; font-size: '+plaqueTextBoxFontSize+'px; text-align: center; z-index: 25; \">' ;
        //webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 25;\">' ;

        webPlaqueTopOffset = webFrameHeight + webPlaqueDistanceBelowMapDisplay;  // ### not sure exactly why this makes sense ###
        webPlaqueTopOffset = webFrameTopThickness + webMapHeight + webPlaqueDistanceBelowMapDisplay;  // ### not sure exactly why this makes sense ###

        // webPlaqueDivStyle =
        //     ' style=\"'
        //     + 'position: absolute;'
        //     + 'top:' + webPlaqueTopOffset + 'px;'
        //     + 'left:' + webPlaqueLeftOffset + 'px;'
        //     + 'text-align: center;'
        //     + 'line-height: 1.0;'
        //     + 'font-size: 9px;'
        //     + 'z-index: 25;'
        //     // EmptyPlaque as background-image:
        //     + 'background-image: url(' + webPlaqueImg + ');'
        //     + 'background-size: contain;'
        //     + 'background-repeat: no-repeat;'
        //     + 'width: 306px;'
        //     + 'padding: 9.5px 12.8px;'
        //     // End EmptyPlaque as background-image
        //     + '\">';

        // previously: webPlaqueBottomOffset = -(webPlaqueHeight) + (4* webFrameScale) ; // + webPlaqueDistanceBelowMapDisplay) ;  // ### not sure exactly why this makes sense ###
        //webPlaqueBottomOffset = -(webPlaqueHeight + 4* webFrameScale) ; // + webPlaqueDistanceBelowMapDisplay) ;  // ### not sure exactly why this makes sense ###
        webPlaqueBottomOffset = -(webPlaqueHeight * webFrameScale);

        webPlaqueLeftOffset = webMapWidth / 2 - webPlaqueWidth / 2; /* 100+400/2-140/2 = 220... nope */

        // webPlaqueDivStyle =
        //     ' style=\"position: absolute;'
        //     + ' bottom:' + webPlaqueBottomOffset + 'px;'
        //     + ' left:' + webPlaqueLeftOffset + 'px;'
        //     + ' text-align: center;'
        //     + ' line-height: ' + plaqueTextBoxLineHeight + ';'
        //     + ' font-size: ' + plaqueTextBoxFontSize + 'px;'
        //     + ' z-index: 25;'
        //     // EmptyPlaque as background-image:
        //     + 'background-image: url(' + webPlaqueImg + ');'
        //     + 'background-size: contain;'
        //     + 'background-repeat: no-repeat;'
        //     + 'width: 306px;'
        //     + 'padding: 9.5px 12.8px;'
        //     // End EmptyPlaque as background-image
        //     + '\">';
        //plaqueTextBoxLeftOffset, webPlaqueTextBoxDivStyle

        plaqueTextBoxLeftOffset = webPlaqueLeftOffset + 8;
        webPlaqueTextBottomOffset = webPlaqueBottomOffset - 20 * plaqueTextBoxLineHeight; // ?? some number of lines offset??
        
        console.warn('webFrameScale', webFrameScale);

        webPlaqueTextBoxDivStyle =
            ' style=\"position: absolute;'
            // + ' bottom:' + webPlaqueTextBottomOffset + 'px;'
            + ' bottom: ' + ( -66.25 * webFrameScale ) + 'px;' // -53px @ 0.8
            // + ' left:' + plaqueTextBoxLeftOffset + 'px;'
            + ' left: ' + ( 125.75 * webFrameScale ) + 'px;' // 100.6px @ 0.8
            + ' text-align: center;'
            + ' line-height: ' + plaqueTextBoxLineHeight + ';'
            + ' font-size: ' + plaqueTextBoxFontSize + 'px;'
            + ' z-index: 25;'
            + '"';

        webPlaqueAttribs = ' class=\"Plaque\" width=' + webPlaqueWidth + 'px height=' + webPlaqueHeight + 'px';
        webPlaqueStyle = ' style=\"width:' + webPlaqueWidth + 'px; maxwidth: 25%;' + webPlaqueHeight + 'px;\";';
        // plaque text ### this is not being used.  Redo and use ###
        var webPlaqueText = "";
        numFilledPlaqueLines = 0;
        var showExtraLine = true;
        
        webPlaqueText +=
            '<p style="'
            + ' margin-bottom: 0;'
            + ' height: 100%;'
            // Clip text if plaque can’t accomodate all 8 lines.
            + ' text-overflow: ellipsis;' // Just to be thorough. Won’t work along vertical axis.
            + ' overflow: hidden;'
            + ' white-space: nowrap;'
            // End clip text
            + '">'
        ;

        for (i = 1; i < numAvailPlaqueLines + 1; i++) {
            if (i > 1) webPlaqueText += '<br>';
            if (
                (localStorage['PlaqueLine' + i] !== undefined)
                & (localStorage['PlaqueLine' + i] !== "undefined")
            ) {
                webPlaqueText += '<span id="plaqueTextBoxL' + i + '">' + localStorage['PlaqueLine' + i] + '</span></em>';
                numFilledPlaqueLines++;
            }
            else if (showExtraLine) {
                webPlaqueText += '<span id="plaqueTextBoxL' + i + '">' + ' ' + '</span></em>';
                showExtraLine = false;
            }
        }
        webPlaqueText += '</p>';

        var webPlaqueTextBoxAspectRatioStyle =
            // EmptyPlaque as background-image:
            ' position: relative;'
            + ' background-image: url(' + webPlaqueImg + ');'
            + ' background-position: top center;'
            + ' background-size: cover;'
            + ' background-repeat: no-repeat;'
            + ' width: ' + ( 138.75 * webFrameScale ) + 'px;' // 111px @ 0.8
            // + ' height: ' + ( 65 * webFrameScale ) + 'px;'
            + ' height: 0;'
            // Keep text inside of red plaque border:
            + ' padding-bottom: 46.5625%;' // Maintains the 640x298 EmptyPlaque.png aspect ratio
            // + ' opacity: 0.5' // testing alignment
            // + ' border: 3px solid black'
            // End EmptyPlaque as background-image
        ;

        var webPlaqueTextBoxDivContentStyle =
            'position: absolute;'
            + ' left: 0;'
            + ' top: 0;'
            + ' width: 100%;'
            + ' height: 100%;'
            + ' padding: ' + ( 4 * webFrameScale ) + 'px;' // 3.2px @ 0.8
        ;

        // plaqueHTML += '<div' + webPlaqueDivStyle;
        // plaqueHTML += '<img src=' + webPlaqueImg + webPlaqueAttribs + webPlaqueStyle + '/>';
        // plaqueHTML += '</div>';
        plaqueHTML += '<div id="webPlaqueTextBoxDiv"' + webPlaqueTextBoxDivStyle + '>';
        plaqueHTML +=   '<div style="' + webPlaqueTextBoxAspectRatioStyle + '">';
        plaqueHTML +=     '<div id="webPlaqueTextBoxDivContent" style="' + webPlaqueTextBoxDivContentStyle + '">';
        plaqueHTML +=       webPlaqueText;
        plaqueHTML +=     '</div>';
        plaqueHTML +=   '</div>';
        plaqueHTML += '</div>';

        if (false) { //localStorage.viewingTripVisuals) {
            plaqueHTML += '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 10000;\">';
            plaqueHTML += '<svg width="' + 200 + '" height="' + 200 + '">';
            plaqueHTML += '<circle cx="0" cy="0" r="100" stroke="green" stroke-width="10" fill="yellow" />';
            plaqueHTML += '</svg>';
            plaqueHTML += '</div>';
        }
        /*    
            if (true) { //localStorage.viewingTripVisuals) {
                plaqueHTML +=   '<div style=\"position: absolute; bottom: 20px; left: 150px; z-index: 100;\">' ;
                plaqueHTML +=   '<svg width="'+regionMapWidth+'" height="'+regionMapHeight+'">' ;
                plaqueHTML +=   '<circle cx="0" cy="0" r="50" stroke="green" stroke-width="4" fill="yellow" />' ;
                plaqueHTML +=   '<rect width="1000" height="400" style="position: absolute; z-index:100; fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />' ;
                plaqueHTML +=   '<circle cx="'+regionMapWidth+'" cy="'+regionMapHeight+'" r="50" stroke="yellow" stroke-width="4" fill="green" />' ;
                plaqueHTML +=   '</svg>' ;
                plaqueHTML +=   '</div>' ;
            }
        */
        console.log("*****Start PlaqueHTML*****");
        console.log(plaqueHTML);
        console.log("*****End PlaqueHTML*****");
        return plaqueHTML;
    } //generatePlaqueHTML()

</script>

<script>
    function RelationShipsPreviewZ(previewRole, showFrame) {
        /* fancy parameter management... */
        console.log("RelationShipsPreviewZ()...");

        /*
            Generally speaking we should avoid global variables & side-effects,
            but in this case we need to make sure the variable is not being reset
            each time the function is called.
            
            On first invocation, the overlay rendering will occur inside the
            `DOMContentLoaded` event listener, so we can be sure
            `document.getElementById("DisplayOverlays")` will be non-null, and
            can therefore set `innerHTML` without issue.

            The `DOMContentLoaded` event only occurs once though, so we need
            to flip `overlaysRendered` to `true` after the first render, and then
            subsequent renders will call `innerHTML` outside of the event.

            See bottom of `RelationShipsPreviewZ` for implementation.
        */
        window.Jimaworks = ( window.Jimaworks || {
            "isDev": /^jimaworks-dev\.myshopify\.com/.test( window.location.host )
        } ); // Singleton for namespacing; avoids global variable conflicts
        window.Jimaworks.overlaysRendered = (
            ( typeof window.overlaysRendered !== "undefined" )
            ? window.overlaysRendered
            : false
        );

        var FeaturesButton = "nope";
        var SizeButton = "nope";
        var PriceButton = "nope";
        var EditButton = "nope";
        var EditTitleButton = "nope";
        var EditOriginsButton = "nope";
        var EditDestinationButton = "nope";
        var EditShipInfoButton = "nope";
        var EditPlaqueButton = "nope";
        var AcceptEditsButton = "nope";

        var EnterTitleText = "nope";
        var EnterOriginsText = "nope";
        var EnterDestinationText = "nope";
        var EnterShipInfoText = "nope";
        var EnterPlaqueText = "nope";
        var RemoveLastLine = "nope";

        var ShowMapButton = "nope";
        var ShowOriginsButton = "nope";
        var ShowDestinationButton = "nope";
        var ShowRouteButton = "nope";
        var ShowShipButton = "nope";
        var ShowSeaScapeButton = "nope";

        var describeMapButton = "nope";
        var describeOriginsButton = "nope";
        var describeDestinationButton = "nope";
        var describeRouteButton = "nope";
        var describeShipButton = "nope";
        var describeSeaScapeButton = "nope";

        var describeTitleTextBoxButton = "nope";
        var describeOriginsTextBoxButton = "nope";
        var describeDestinationTextBoxButton = "nope";
        var describeShipInfoTextBoxButton = "nope";
        var describePlaqueTextBoxButton = "nope";

        var BackButton = "nope";
        var SaveButton = "nope";
        var BuyButton = "nope";
        var ReturnButton = "nope";

        /* use this to determine whether b was passed or not */
        if (arguments.length < 3) {
            /* BuyButton, SaveButton not passed */
        }
        else if (arguments.length == 3) {
            /* BuyButton was passed -- 3rd argument */
            BuyButton = arguments[3];
        }
        else if (arguments.length == 4) {
            /* SaveButton was passed also -- 4th argument  */
            BuyButton = arguments[3];
            SaveButton = arguments[4];
        }
        else if (arguments.length == 5) {
            /* ReturnButton was passed also -- 5th argument  */
            BuyButton = arguments[3];
            SaveButton = arguments[4];
            ReturnButton = arguments[5];
        }

        /*document.referrer ;*/
        var OriginatingPage = window.location.href;
        var shopifyFilePrefix;
        var shopifyFileSuffix;
        
        if ( window.Jimaworks.isDev ) {
            shopifyFilePrefix = "https://cdn.shopify.com/s/files/1/0263/8148/4080/files/";
            shopifyFileSuffix = "?922";
        } else {
            shopifyFilePrefix = "https://cdn.shopify.com/s/files/1/1336/0641/files/";
            shopifyFileSuffix = "?16338137725744926710";
        }

        var headerText
        if (previewRole === "initialView") {
            headerText = '<p><small><em>A mockup of your RelationShips Project at its starting point.';
            headerText += '<br>From here you switch, mix, match, and tailor any elements of this display';
            headerText += '<br>that need to change to show the story you want to tell</em></small></p>';
            /* Control Button defn and placement */
            FeaturesButton = "yup";
            SizeButton = "yup";
            PriceButton = "yup";
            EditButton = "yup";
            BackButton = "yup";
            SaveButton = "yup";
        }
        else if (previewRole === "mockup") {
            headerText = '<p><em>Mockup.';
            headerText += '<br>See <a href="' + window.location.host + '/pages/galleries">Examples</a> to see what final orders look like</em></p>';
            /* Control Button defn and placement */
            FeaturesButton = "yup";
            SizeButton = "yup";
            PriceButton = "yup";
            EditButton = "yup";
            BackButton = "yup";
            SaveButton = "yup";
        }
        else if (previewRole === "noMenus") {
            headerText = '<p><em>Mockup.';
            headerText += '<br>See <a href="' + window.location.host + '/pages/galleries">Examples</a> to see what final orders look like</em></p>';
            /* No Control Button defn and placement */
        }
        else if (previewRole === "showTextBoxes") {
            headerText = '<p><em>The Five RelationShips TextBoxes.';
            headerText += '<br>Use buttons on right to get some more details</em></p>';
            /* Control Button defn and placement */
            EditTitleButton = "yup";
            EditOriginsButton = "yup";
            EditDestinationButton = "yup";
            EditShipInfoButton = "yup";
            EditPlaqueButton = "yup";
            BackButton = "yup";
            //  setting localStorage.viewingTextBoxes = "yup" in calling context (and removing afterwards) ;
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "edit") {
            headerText = '<p><em>All Fields can be modified.';
            headerText += '<br>See Examples for some possibilities</em></p>';
            /* Control Button defn and placement */
            EditTitleButton = "yup";
            EditOriginsButton = "yup";
            EditDestinationButton = "yup";
            EditShipInfoButton = "yup";
            EditPlaqueButton = "yup";
            BackButton = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "editTitle") {
            if (localStorage.viewingTextBoxes == "yup") {
                headerText = '<p><em>The Title Text Box has at most three lines.';
                headerText += '<br>They appear to the right.</em></p>';
            }
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>The Map is the background visual.';
                headerText += '<br>It is a map of the times and is offerend in multiple palates (see to the right).</em></p>';
            }
            else {
                headerText = '<p><em>Modify the Title text any way you want.';
                headerText += '<br>See Examples for some possibilities</em></p>';
            }
            /* Control Button defn and placement */
            EnterTitleText = "yup";
            BackButton = "yup";
            RemoveLastLine = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "editOrigin") {
            if (localStorage.viewingTextBoxes == "yup") {
                headerText = '<p><em>The Origins Text Box has at most two lines.';
                headerText += '<br>They appear to the right.</em></p>';
            }
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>The Country of Origin will be highlighted.';
                headerText += '<br>The highlight will be a boldened border of the country.</em></p>';
            }
            else {
                headerText = '<p><em>Modify the Origins text any way you want.';
                headerText += '<br>See Examples for some possibilities</em></p>';
            }
            /* Control Button defn and placement */
            EnterOriginsText = "yup";
            BackButton = "yup";
            RemoveLastLine = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "editDestination") {
            if (localStorage.viewingTextBoxes == "yup") {
                headerText = '<p><em>The Destinations Text Box has at most two lines.';
                headerText += '<br>They appear to the right.</em></p>';
            }
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>The Destination State of Province will be highlighted.';
                headerText += '<br>The highlight will be a boldened border of the State of Province.</em></p>';
            }
            else {
                headerText = '<p><em>Modify the Destination text any way you want.';
                headerText += '<br>See Examples for some possibilities</em></p>';
            }
            /* Control Button defn and placement */
            EnterDestinationText = "yup";
            BackButton = "yup";
            RemoveLastLine = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "editShipInfo") {
            if (localStorage.viewingTextBoxes == "yup") {
                headerText = '<p><em>The Ship Info Text Box has at most two lines.';
                headerText += '<br>They appear to the right.</em></p>';
            }
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>The crossing route will be graphically displayed.';
                headerText += '<br>This will show an accurate rendering of the sea route (or air route if this crossing was by plane)</em></p>';
            }
            // sixth visual
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>A seascape option is offered.';
                headerText += '<br>This option will often provide dramatic impact for the display</em></p>';
            }
            else {
                headerText = '<p><em>Modify the Ship Info text any way you want.';
                headerText += '<br>See Examples for some possibilities</em></p>';
            }
            /* Control Button defn and placement */
            EnterShipInfoText = "yup";
            BackButton = "yup";
            RemoveLastLine = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "editPlaque") {
            if (localStorage.viewingTextBoxes == "yup") {
                headerText = '<p><em>The Plaque Text Box has at most eight lines.';
                headerText += '<br>They appear to the right.</em></p>';
            }
            else if (localStorage.viewingTripVisuals == "yup") {
                headerText = '<p><em>An image of your exact ship, or a representative if you do now know it, will be offered.';
                headerText += '<br>The ship image will be either a historic image (poster, painting, postcard, etc) or a jimaworks-made image.</em></p>';
            }
            else {
                headerText = '<p><em>Modify the Plaque in any way you want.';
                headerText += '<br>See Examples for some possibilities</em></p>';
            }
            /* Control Button defn and placement */
            EnterPlaqueText = "yup";
            BackButton = "yup";
            RemoveLastLine = "yup";
            /* AcceptEditsButton = "yup";  */
        }
        else if (false) { //previewRole==="showTripVisuals") {
            headerText = '<p><em>The Six RelationShips TripVisuals (on right).';
            //headerText  +=   '<br>Click the buttons for more details</em></p>' ;
            /* Control Button defn and placement */
            ShowMapButton = "yup";
            ShowOriginsButton = "yup";
            ShowDestinationButton = "yup";
            ShowRouteButton = "yup";
            ShowShipButton = "yup";
            ShowSeaScapeButton = "yup";
            BackButton = "yup";
            //  setting localStorage.viewingTextBoxes = "yup" in calling context (and removing afterwards) ;
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "describeTripVisuals") {
            headerText = '<p><em>The Six RelationShips TripVisuals (on right).';
            //headerText  +=   '<br>Click the buttons for more details</em></p>' ;
            /* Control Button defn and placement */
            describeMapButton = "yup";
            describeOriginsButton = "yup";
            describeDestinationButton = "yup";
            describeRouteButton = "yup";
            describeShipButton = "yup";
            describeSeaScapeButton = "yup";
            BackButton = "yup";
            //  setting localStorage.viewingTextBoxes = "yup" in calling context (and removing afterwards) ;
            /* AcceptEditsButton = "yup";  */
        }
        else if (previewRole === "describeTextBoxes") {
            headerText = '<p><em>The Five RelationShips Text Boxes (on right).';
            //headerText  +=   '<br>Click the buttons for more details</em></p>' ;
            /* Control Button defn and placement */
            describeTitleTextBoxButton = "yup";
            describeOriginsTextBoxButton = "yup";
            describeDestinationTextBoxButton = "yup";
            describeShipInfoTextBoxButton = "yup";
            describePlaqueTextBoxButton = "yup";
            BackButton = "yup";
            //  setting localStorage.viewingTextBoxes = "yup" in calling context (and removing afterwards) ;
            /* AcceptEditsButton = "yup";  */
        }
        // ### not sure these are/need be invoked ###
        else if (previewRole === "showMap") {
            // ### need to check viewingTripVisuals?? NO.  There is no edit vs view mode to distinguish here###
            headerText = '<p><em>The Map is the background visual.';
            headerText += '<br>It is a map of the times and is offered in multiple palates (see to the right).</em></p>';
        }
        else if (previewRole === "showOrigin") {
            headerText = '<p><em>The Country of Origin will be highlighted.';
            headerText += '<br>The highlight will be a boldened border of the country.</em></p>';
        }
        else if (previewRole === "showDestination") {
            headerText = '<p><em>The Destination State of Province will be highlighted.';
            headerText += '<br>The highlight will be a boldened border of the State of Province.</em></p>';
        }
        else if (previewRole === "showRoute") {
            headerText = '<p><em>The crossing route will be graphically displayed.';
            headerText += '<br>This will show an accurate rendering of the sea route (or air route if this crossing was by plane)</em></p>';
        }
        else if (previewRole === "showShip") {
            headerText = '<p><em>An image of your exact ship, or a representative if you do now know it, will be offered.';
            headerText += '<br>The ship image will be either a historic image (poster, painting, postcard, etc) or a jimaworks-made image.</em></p>';
        }
        else if (previewRole === "showSeascape") {
            headerText = '<p><em>A seascape option is offered.';
            headerText += '<br>This option will often provide dramatic impact for the display</em></p>';
        }
        else if (previewRole === "highlightTitle") {
            headerText = '<p><em>Constructing line 1 of your Title.';
            headerText += '<br>See Examples for additional ideas</em></p>';
        }
        else {
            headerText = '<p><em>Mockup.';
            headerText += '<br>See <a href="' + window.location.host + '/pages/galleries">Examples</a> to see what final orders look like</em></p>';
            /* Control Button defn and placement */
            FeaturesButton = "yup";
            SizeButton = "yup";
            PriceButton = "yup";
            EditButton = "yup";
            BackButton = "yup";
            SaveButton = "yup";
        }

        //                ReturnButton = "yup" ;
        var IncreaseButton = "yup";
        var DecreaseButton = "yup";

        var controlButtonPlacement = "RightColumn"; // or "Top"
        var buttonWidth = 60;
        var editButtonWidth = 90;
        var titleLineWidth = 160;
        var originLineWidth = 160;
        var destinationLineWidth = 160;
        var ShipInfoLineWidth = 160;
        var plaqueLineWidth = 160;
        var describeTextBoxWidth = 160;
        //"showTripVisuals"
        //var showTripVisualsButtonWidth = 200 ;
        var describeTripVisualsButtonWidth = 200;

        var controlButtons = "";
        if (EditTitleButton !== "nope") {
            if (localStorage.viewingTextBoxes == "yup") {
                controlButtons += '<button id="editTitle" class="float-left submit-button" style="width: ' + describeTextBoxWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editTitleTextBox()">TextBox 1: Title</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
            else {
                controlButtons += '<button id="editTitle" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editTitleTextBox()">Edit Title</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
        }
        if (EditOriginsButton !== "nope") {
            if (localStorage.viewingTextBoxes == "yup") {
                controlButtons += '<button id="editOrigin" class="float-left submit-button" style="width: ' + describeTextBoxWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editOriginTextBox()">TextBox 2: Origins</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
            else {
                controlButtons += '<button id="editOrigin" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editOriginTextBox()">Edit Origins</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
        }
        if (EditDestinationButton !== "nope") {
            if (localStorage.viewingTextBoxes == "yup") {
                controlButtons += '<button id="editDestination" class="float-left submit-button" style="width: ' + describeTextBoxWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editDestinationTextBox()">TextBox3: Destination</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
            else {
                controlButtons += '<button id="editDestination" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editDestinationTextBox()">Edit Destination</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
        }
        if (EditShipInfoButton !== "nope") {
            if (localStorage.viewingTextBoxes == "yup") {
                //controlButtons +=  '<div style="position: absolute; top: -34px; left: -0px; width: 510px; height: 80px; z-index: 25; line-height: 0.9; color red">' ;
                //controlButtons +=  '<div style="font-size: large;">' ;
                controlButtons += '<button id="editShipInfo" class="float-left submit-button" style="width: ' + describeTextBoxWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editShipInfoTextBox()">TextBox 4: Ship Info</button>';
                //controlButtons +=  '</div>' ;
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
            else {
                controlButtons += '<button id="editShipInfo" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editShipInfoTextBox()">Edit Ship Info</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
        }
        if (EditPlaqueButton !== "nope") {
            if (localStorage.viewingTextBoxes == "yup") {
                controlButtons += '<button id="editPlaque" class="float-left submit-button" style="width: ' + describeTextBoxWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editPlaqueTextBox()">TextBox 5: Plaque</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
            else {
                controlButtons += '<button id="editPlaque" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="editPlaqueTextBox()">Edit Plaque</button>';
                if (controlButtonPlacement == "RightColumn") {
                    controlButtons += '<br>';
                }
            }
        }
        if (EnterTitleText !== "nope") {
            //                        controlButtons +=  '<p>Change Title Lines here:<\p>'
            controlButtons += '<input id="enterTitleLine1" type="text" value="' + localStorage.TitleLine1 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterTitleText()">';
            controlButtons += '<br><input id="enterTitleLine2" type="text" value="' + localStorage.TitleLine2 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterTitleText()">';
            controlButtons += '<br><input id="enterTitleLine3" type="text" value="' + localStorage.TitleLine3 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterTitleText()">';
        }
        if (EnterOriginsText !== "nope") {
            //                        controlButtons +=  '<p>Change Origin Lines here:<\p>'
            controlButtons += '<input id="enterOriginLine1" type="text" value="' + localStorage.originsTextBoxL1 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterOriginText()">';
            controlButtons += '<br><input id="enterOriginLine2" type="text" value="' + localStorage.originsTextBoxL2 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterOriginText()">';
        }
        if (EnterDestinationText !== "nope") {
            //                        controlButtons +=  '<p>Change Destination Lines here:<\p>'
            controlButtons += '<input id="enterDestinyLine1" type="text" value="' + localStorage.DestinyLine1 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterDestinationText()">';
            controlButtons += '<br><input id="enterDestinyLine2" type="text" value="' + localStorage.DestinyLine2 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterDestinationText()">';
        }
        if (EnterShipInfoText !== "nope") {
            //                        controlButtons +=  '<p>Change ShipInfo Lines here:<\p>'
            controlButtons += '<input id="enterShipInfoLine1" type="text" value="' + localStorage.ShipInfoLine1 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterShipInfoText()">';
            controlButtons += '<br><input id="enterShipInfoLine2" type="text" value="' + localStorage.ShipInfoLine2 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterShipInfoText()">';
        }
        if (describeMapButton !== "nope") {
            controlButtons += '<button id="describeMapButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeMap()">MapBackground</button>';
        }
        if (describeOriginsButton !== "nope") {
            controlButtons += '<br><button id="describeOriginsButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeOrigins()">Hightlighted Country of Origin</button>';
        }
        if (describeDestinationButton !== "nope") {
            controlButtons += '<br><button id="describeDestinationButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeDestination()">Highlighted Destination State/Province</button>';
        }
        if (describeRouteButton !== "nope") {
            controlButtons += '<br><button id="describeRouteButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeRoute()">Rendering of Crossing Route</button>';
        }
        if (describeShipButton !== "nope") {
            controlButtons += '<br><button id="describeShipButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeShip()">The Ship (or Plane)</button>';
        }
        if (describeSeaScapeButton !== "nope") {
            controlButtons += '<br><button id="describeSeaScapeButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeSeaScape()">Optional Seascape for Dramatic Effect</button>';
            // ### special case - add break to end of th
            controlButtons += '<br>';
        }
        if (describeTitleTextBoxButton !== "nope") {
            controlButtons += '<button id="describeTitleTextBoxButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeTitleTextBox()">Title TextBox</button>';
        }
        if (describeOriginsTextBoxButton !== "nope") {
            controlButtons += '<br><button id="describeOriginsTextBoxButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeOriginsTextBox()">Origins TextBox</button>';
        }
        if (describeDestinationTextBoxButton !== "nope") {
            controlButtons += '<br><button id="describeDestinationTextBoxButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeDestinationTextBox()">Destination TextBox</button>';
        }
        if (describeShipInfoTextBoxButton !== "nope") {
            controlButtons += '<br><button id="describeShipInfoTextBoxButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describeShipInfoTextBox()">Trip Information TextBox</button>';
        }
        if (describePlaqueTextBoxButton !== "nope") {
            controlButtons += '<br><button id="describePlaqueTextBoxButton" class="float-left submit-button" style="width: ' + describeTripVisualsButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="describePlaqueTextBox()">Plaque TextBox - Who Came Over</button>';
            // ### special case - add break to end of th
            controlButtons += '<br>';
        }

        var numAvailPlaqueLines = 8;
        var numFilledPlaqueLines = 0;
        var maxLnOfFilledPlaqueLines = 0;
        var thisLineNum = 0;
        var currentPlaqueLine;

        for (i = 0; i < numAvailPlaqueLines; i++) {
            currentPlaqueLine = localStorage['PlaqueLine' + i];
            //console.log("(eval('localStorage.PlaqueLine'+i)["+eval('localStorage.PlaqueLine'+i)+"] !== undefined)"+(eval('localStorage.PlaqueLine'+i) !== undefined));
            if (
                (currentPlaqueLine !== undefined)
                & (currentPlaqueLine !== "undefined")
            ) {
                numFilledPlaqueLines++;
                maxLnOfFilledPlaqueLines = Math.max(maxLnOfFilledPlaqueLines, currentPlaqueLine.length);
            }
        }
        //                alert('number of filled plaque lines == '+numFilledPlaqueLines);
        if (EnterPlaqueText !== "nope") {
            //                        controlButtons +=  '<p>Change Plaque Lines here:<\p>'
            /*
                                    controlButtons +=  '<input id="enterPlaqueLine1" type="text" value="'+localStorage.PlaqueLine1+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine2" type="text" value="'+localStorage.PlaqueLine2+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine3" type="text" value="'+localStorage.PlaqueLine3+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine4" type="text" value="'+localStorage.PlaqueLine4+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine5" type="text" value="'+localStorage.PlaqueLine5+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine6" type="text" value="'+localStorage.PlaqueLine6+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
                                    controlButtons +=  '<br><input id="enterPlaqueLine7" type="text" value="'+localStorage.PlaqueLine7+'" style="width: '+titleLineWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText('+thisLineNum+',false)">' ;  
            */
            thisLineNum++; // thisLineNum==1
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine1" type="text" value="' + localStorage.PlaqueLine1 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine2" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==2
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine2" type="text" value="' + localStorage.PlaqueLine2 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine3" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==3
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine3" type="text" value="' + localStorage.PlaqueLine3 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine4" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==4
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine4" type="text" value="' + localStorage.PlaqueLine4 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine5" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==5
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine5" type="text" value="' + localStorage.PlaqueLine5 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine6" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==6
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine6" type="text" value="' + localStorage.PlaqueLine6 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine7" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + numFilledPlaqueLines + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==7
            if (numFilledPlaqueLines >= thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine7" type="text" value="' + localStorage.PlaqueLine7 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
                if (numFilledPlaqueLines == thisLineNum) {
                    controlButtons += '<br><input id="enterPlaqueLine8" type="text" value="...add text (one line at a time) " style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',true)">';
                }
            }
            thisLineNum++; // thisLineNum==8
            if (numFilledPlaqueLines == thisLineNum) {
                controlButtons += '<br><input id="enterPlaqueLine8" type="text" value="' + localStorage.PlaqueLine8 + '" style="width: ' + titleLineWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" oninput="enterPlaqueText(' + thisLineNum + ',false)">';
            }
        }
        if (RemoveLastLine !== "nope") {
            controlButtons += '<button id="removeLastLine" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="removeLastLine(\'' + previewRole + '\')">DeleteLast</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (AcceptEditsButton !== "nope") {
            controlButtons += '<button id="acceptEdits" class="float-left submit-button" style="width: ' + editButtonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold;" onclick="acceptEdits()">AcceptEdits</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (FeaturesButton !== "nope") {
            controlButtons += '<button id="FeaturesButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="FeaturesPage()">Features</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (SizeButton != "nope") {
            controlButtons += '<button id="SizeButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="SizePage()">Size</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (PriceButton !== "nope") {
            controlButtons += '<button id="PriceButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="PricePage()">Price</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (EditButton !== "nope") {
            controlButtons += '<button id="EditButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="EditPage()">Edit</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (BackButton != "nope") {
            controlButtons += '<button id="BackButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="BackToPrevLevel(' + '\'' + previewRole + '\'' + ')">Back</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        /*
               if (ReturnButton!="nope") {
                        controlButtons +=  '<button id="ReturnButton" class="float-left submit-button" style="width: '+buttonWidth+'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="ReturnToCallingPage()">Back</button>' ;  
                        if(controlButtonPlacement == "RightColumn") {
                            controlButtons +=  '<br>' ;
                        }
                    } 
          */
        if (SaveButton != "nope") {
            controlButtons += '<button id="SaveButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="SaveCurrentState()">Save</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }
        if (BuyButton != "nope") {
            controlButtons += '<button id="BuyButton" class="float-left submit-button" style="width: ' + buttonWidth + 'px; background-color: Ivory; border: 4px solid DarkGreen; padding: 5px; margin: 0 3px; font-size: 110%; font-weight: bold; " onclick="GoToBuyPage()">Buy</button>';
            if (controlButtonPlacement == "RightColumn") {
                controlButtons += '<br>';
            }
        }

        var sizeButtonPlacement = "RightColumn"; // or "Top"
        var sizeButtonWidth = 30;
        var sizeButtons = "";
        sizeButtons += '<button id="IncreasePreviewSize" class="float-left submit-button" style="width: ' + sizeButtonWidth + 'px; height: ' + sizeButtonWidth + 'px; background-color: Ivory; border: 4px solid grey; padding: 0px; margin: 0 0px; font-size: 200%; font-weight: bold; " onclick="IncreasePreviewScaleMultiple()">+</button>';
        if (sizeButtonPlacement == "RightColumn") {
            sizeButtons += '<br>';
        }
        sizeButtons += '<button id="DecreasePreviewSize" class="float-left submit-button" style="width: ' + sizeButtonWidth + 'px; height: ' + sizeButtonWidth + 'px; background-color: Ivory; border: 4px solid grey; padding: 0px; margin: 0 0px; font-size: 200%; font-weight: bold; " onclick="DecreasePreviewScaleMultiple()">-</button>';
        if (sizeButtonPlacement == "RightColumn") {
            sizeButtons += '<br>';
        }

        /* page */
        var topMargin = 20;
        var leftMargin = 120;
        var webFrameScale = currentPreviewScale;
        /* map foundations for display accouterments */

        var img = new Image();

        img.onload = function () {
            var height = img.height;
            var width = img.width;

            // code here to use the dimensions
        };

        var webMapStyle = localStorage.MapStyle;
        var webMapStyleAbbrev = localStorage.MapStyleAbbrev;
        var webMapImg = shopifyFilePrefix + localStorage.webMapImg;

        var mapImg = webMapImg;
        img.src = mapImg;
        mapX = img.width;  // 1850
        mapY = img.height; // 1151
        console.log("mapImg==" + mapImg + " mapX==" + mapX + " mapY==" + mapY); / *  ### not working ### */

        var theGoldenRatio = 1.618;
        var webMapWidth = 400 * webFrameScale;
        var webMapHeight = (webMapWidth / theGoldenRatio) * webFrameScale; /* get the actual height of the map */
        var shipPic = ( localStorage.getItem('shipPic') || '' );

        /* ship */
        var webShipImg = shopifyFilePrefix + shipPic.replace("(", "_").replace(")", "_");
        // var webShipImgQuoted = '\"' + webShipImg + '\"'; // Not necessary

        /* frame */
        var webFrameSrcStr;
        var webFrameStyleName;
        var webFrameImg, webFrameAbbrv, webFrameDivStyle, webFrameAttribs, webFrameStyle;
        var webFrameWidth, webFrameHeight;
        var webFrameTopOffset;
        var webFrameLeftOffset;
        //var specificFrameTopOffsetDelta ;
        //var specificFrameLeftOffsetDelta ;
        /* frames are symmetrical... */
        var webFrameTopThickness = 110 * webFrameScale;
        var webFrameBottomThickness = webFrameTopThickness;
        var webFrameLeftThickness = webFrameTopThickness;
        var webFrameRightThickness = webFrameTopThickness;
        if (showFrame === "showFrame") {
            webFrameStyleName = localStorage.Frame;
            if (webFrameStyleName == 'NoFrame') {
                webFrameAbbrv = 'NoFrame';
                webFrameImg = '\"' + shopifyFilePrefix + 'GoldRatio-Med-NoFrame-NoRuler-72ppi.png' + '\"';
                webFrameWidth = 510;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -(0.5 * webFrameTopThickness);  // need to offset top of just the mat...
                webFrameLeftOffset = -60 * webFrameScale;
            }
            else if (webFrameStyleName == 'BlackRoped') {
                webFrameAbbrv = 'Black';
                webFrameWidth = 600;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -webFrameTopThickness;
                webFrameLeftOffset = -105 * webFrameScale;
            }
            else if (webFrameStyleName == 'GoldTrim') {
                webFrameAbbrv = 'Gold';
                webFrameWidth = 600;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -webFrameTopThickness;
                webFrameLeftOffset = -105 * webFrameScale;
            }
            else if (webFrameStyleName == 'LightCherry') {
                webFrameAbbrv = 'Cherry';
                webFrameWidth = 600;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -webFrameTopThickness;
                webFrameLeftOffset = -105 * webFrameScale;
            }
            else if (webFrameStyleName == 'BlackWalnut') {
                webFrameAbbrv = 'Walnut-NoPlaque'; // TODO: Make NoPlaque universal
                webFrameWidth = 630;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -webFrameTopThickness;
                webFrameLeftOffset = -120 * webFrameScale;
            }
            else {
                webFrameAbbrv = 'Walnut-NoPlaque'; // TODO: Make NoPlaque universal
                webFrameWidth = 600;
                webFrameWidth = webFrameWidth * webFrameScale;
                webFrameHeight = webMapWidth / theGoldenRatio;
                webFrameTopOffset = -webFrameTopThickness;
                webFrameLeftOffset = -105 * webFrameScale;
            }
        }
        else {
            webFrameStyleName = 'NoFrame'
            webFrameAbbrv = 'NoFrame';
            webFrameImg = '\"' + shopifyFilePrefix + 'GoldRatio-Med-NoFrame-NoRuler-72ppi.png' + '\"';
            webFrameWidth = 510;
            webFrameWidth = webFrameWidth * webFrameScale;
            webFrameHeight = webMapWidth / theGoldenRatio;
            webFrameTopOffset = -(0.5 * webFrameTopThickness);   // need to offset top of just the mat...
            webFrameLeftOffset = -60 * webFrameScale;
        }

        //webFrameTopOffset = -110;

        webFrameImg = '\"' + shopifyFilePrefix + 'GoldRatio-Med-' + webFrameAbbrv + '-NoRuler-72ppi.png' + '\"';
        webFrameDivStyle = ' style=\"position: absolute; Top:' + webFrameTopOffset + 'px; left:' + webFrameLeftOffset + 'px; z-index: 10;\">';
        webFrameAttribs = ' class=\"frame\" width=' + webFrameWidth + 'px height=\"auto\"';
        webFrameStyle = ' style=\"width:' + webFrameWidth + 'px; maxwidth: 25%; height: auto\";';

        /* ### ?? unused? ## */
        webFrameSrcStr += '<img src=' + webFrameImg + webFrameAttribs + webFrameStyle + '/>';

        /* plaque */
        /*       
                var webFrameTopThickness = 30 * webFrameScale ;
                var webFrameBottomThickness = webFrameTopThickness ;
                var webFrameLeftThickness = webFrameTopThickness ;
                var webFrameRightThickness = webFrameTopThickness ;
        
                var topMargin = 20 ;
                var leftMargin = 20 ;
                var webFrameScale = 1.0 ;
        */
        /*
                    //https://cdn.shopify.com/s/files/1/1336/0641/files/EmptyPlaque.png
                    var webPlaque = "Empty" ;
                    var webPlaqueDistanceBelowMapDisplay = 30 * webFrameScale;
                    var webPlaqueImg, webPlaqueAbbrv, webPlaqueDivStyle, webPlaqueAttribs, webPlaqueStyle ;
                    var webPlaqueWidth, webPlaqueHeight ;
                    var webPlaqueBaseWidth, webPlaqueMatBorder ;
                    var webPlaqueTopOffset, webPlaqueBottomOffset ;
                    var webPlaqueLeftOffset, webPlaqueRightOffset ;
                    var webPlaquewebStr, webPlaqueBottomOffsetStr, webPlaqueLeftOffsetStr ;
                    var plaqueTextBoxFontSize, plaqueTextBoxLineHeight, plaqueTextBoxLeftOffset, webPlaqueTextBoxDivStyle;
                    webPlaqueBaseWidth = 140+10 ; //### adding 10 to coer previous plaque ###
                    webPlaqueMatBorder = 6 ;  // ### was 4... 6? ###
                                               
                    webPlaqueWidth = (webPlaqueBaseWidth + webPlaqueMatBorder) * webFrameScale;
                    webPlaqueHeight = webPlaqueWidth/2;
                    //webPlaqueBottomOffset = -50;
                    // ### Don't seem to be able to get this to work from the top ###
                    //webPlaqueTopOffset = (webMapHeight + (webFrameBottomThickness/2)) - (webPlaqueHeight/2.0) ;
                    //webPlaqueTopOffset = webMapHeight;
                    webPlaqueTopOffset = webFrameTopOffset + webFrameTopThickness + webMapHeight + (webPlaqueHeight/2.0) ;
                    //webPlaqueBottomOffset = -(webPlaqueHeight + ((webFrameBottomThickness-webPlaqueHeight)/2.0));
                    webPlaqueBottomOffset = -(webPlaqueHeight - webPlaqueDistanceBelowMapDisplay);
                    //webPlaqueLeftOffset = 125 * webFrameScale ; /* 100+400/2-140/2 = 220... nope
              // ### webPlaqueOffset seems to be defined twice - how often is this happening with these vars? ###
              // 100+400/2-140/2 = 220... nope
                    webPlaqueLeftOffset = webMapWidth/2 - webPlaqueWidth/2 ; 
                    if (webPlaque == 'Empty') {
                        webPlaqueAbbrv = 'Empty';
                    }
                    // ### no plaque ###
                    else {
                        webPlaqueAbbrv = 'NoPlaque';
                    }
                    //### *arbitrarily* adjusting font size###
                    maxLnOfFilledPlaqueLines = maxLnOfFilledPlaqueLines/2 ;
                    webPlaqueImg = '\"' + shopifyFilePrefix + webPlaque + 'Plaque.png' + '\"';  
                    plaqueTextBoxFontSize = webPlaqueHeight/(numFilledPlaqueLines+1) ; //  *webFrameScale  ;   // 9*webFrameScale
                    console.log("plaqueTextBoxFontSize= webPlaqueHeight/(numFilledPlaqueLines+1))=="+plaqueTextBoxFontSize);
                    plaqueTextBoxFontSize = webPlaqueWidth/(maxLnOfFilledPlaqueLines+2) ;
                    console.log("plaqueTextBoxFontSize= webPlaqueWidth/(maxLnOfFilledPlaqueLines+2))=="+plaqueTextBoxFontSize);
                    plaqueTextBoxFontSize = Math.min(webPlaqueHeight/(numFilledPlaqueLines+1),webPlaqueWidth/(maxLnOfFilledPlaqueLines+2)) ; //  *webFrameScale  ;   // 9*webFrameScale
                    console.log("plaqueTextBoxFontSize = Math.min((webPlaqueHeight/(numFilledPlaqueLines+1)),webPlaqueWidth/(maxLnOfFilledPlaqueLines+2)))=="+plaqueTextBoxFontSize);
                    //### plaqueTextBoxLineHeight = webPlaqueHeight / numFilledPlaqueLines ;
                    plaqueTextBoxLineHeight = (webPlaqueHeight / numFilledPlaqueLines) * webFrameScale ;
                    plaqueTextBoxLineHeight = 1.0 * webFrameScale ;
                    
                    //webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; z-index: 10;\">' ;
                    //webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 10;\">' ;
                    //webPlaqueDivStyle = ' style=\"position: absolute; top:'+webPlaqueTopOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 10;\">' ;
        
                    //webPlaqueDivStyle =   'style=\"position: absolute; bottom: '+webPlaqueBottomOffset+'px; left: '+webPlaqueLeftOffset+'px; z-index: 25; line-height: '+plaqueTextBoxLineHeight+'; font-size: '+plaqueTextBoxFontSize+'px; text-align: center; z-index: 25; \">' ;
                    //webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 25;\">' ;
            
            webPlaqueTopOffset = webFrameHeight + webPlaqueDistanceBelowMapDisplay ;  // ### not sure exactly why this makes sense ###
            webPlaqueTopOffset = webFrameTopThickness + webMapHeight + webPlaqueDistanceBelowMapDisplay ;  // ### not sure exactly why this makes sense ###
            
                    webPlaqueDivStyle = ' style=\"position: absolute; top:'+webPlaqueTopOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: 1.0;  font-size: 9px; z-index: 25;\">' ;
            
            webPlaqueBottomOffset = -(webPlaqueHeight) + (4* webFrameScale) ; // + webPlaqueDistanceBelowMapDisplay) ;  // ### not sure exactly why this makes sense ###
            
            webPlaqueLeftOffset = webMapWidth/2 - webPlaqueWidth/2 ; /* 100+400/2-140/2 = 220... nope
            
            webPlaqueDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+webPlaqueLeftOffset+'px; text-align: center; line-height: '+plaqueTextBoxLineHeight+';  font-size: '+plaqueTextBoxFontSize+'px; z-index: 25;\">' ;
            //plaqueTextBoxLeftOffset, webPlaqueTextBoxDivStyle
            plaqueTextBoxLeftOffset= webPlaqueLeftOffset + 8 ;
            webPlaqueTextBoxDivStyle = ' style=\"position: absolute; bottom:'+webPlaqueBottomOffset+'px; left:'+plaqueTextBoxLeftOffset+'px; text-align: center; line-height: '+plaqueTextBoxLineHeight+';  font-size: '+plaqueTextBoxFontSize+'px; z-index: 25;\">' ;
        
                    webPlaqueAttribs = ' class=\"Plaque\" width='+webPlaqueWidth+'px height='+webPlaqueHeight+'px' ;
                    webPlaqueStyle = ' style=\"width:'+webPlaqueWidth+'px; maxwidth: 25%;'+webPlaqueHeight+'px;\";' ;
                    // plaque text ### this is not being used.  Redo and use ###
                    var webPlaqueText ;
                    webPlaqueText   = ' style=\"position: absolute; top: 8px; left: 8px; z-index: 12;\">' ;
                    webPlaqueText  +=   '<div style=\"position: absolute; top: 60px; left: 25px; z-index: 25; text-align: center; line-height: 0.9;  font-size: 10px; \">' ;
                    webPlaqueText  +=   '<p>'+localStorage.PlaqueLine1 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine2 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine3 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine4 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine5 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine6 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine7 ;
                    webPlaqueText  +=   '<br>'+localStorage.PlaqueLine8+'</p>' ;
                    webPlaqueText  +=   '</div>' ;
        */

        /* seascape */
        var option = "DontAddSeaScape"; //"AddSeaScape" ;// "DontAddSeaScape" ;   
        var seaScapeImgName;
        var seaScapeImg;
        var seaScapeHorizonImgName;
        var seaScapeHorizonImg;

        var seaScapeWidth, seaScapeHeight;
        var seaScapeTopOffset, seaScapeBottomOffset;
        var seaScapeLeftOffset, seaScapeRightOffset;
        seaScapeWidth = webMapWidth;
        seaScapeHeight = 60 * webFrameScale;
        seaScapeBottomOffset = 0 * webFrameScale;
        seaScapeLeftOffset = 0 * webFrameScale;

        var seaScapeHorizonWidth, seaScapeHorizonHeight;
        var seaScapeHorizonTopOffset, seaScapeHorizonBottomOffset;
        var seaScapeHorizonLeftOffset, seaScapeHorizonRightOffset;
        seaScapeHorizonWidth = webMapWidth;
        seaScapeHorizonHeight = 20 * webFrameScale;
        seaScapeHorizonBottomOffset = 40 * webFrameScale;
        seaScapeHorizonLeftOffset = 0 * webFrameScale;

        var seaScapeHTML;
        if (option === "AddSeaScape") {
            /*seaScapeImg = "https://cdn.shopify.com/s/files/1/1336/0641/files/Ocean7Cropped640W.png?10959405084462869905" ;*/
            /*seaScapeSquashedImg = "https://cdn.shopify.com/s/files/1/1336/0641/files/Ocean7CroppedSquashed500W.png?17942739908704347492" ;*/
            /*seaScapeHorizonImg = "https://cdn.shopify.com/s/files/1/1336/0641/files/Ocean7Horizon500W.png?17942739908704347492" ;*/

            seaScapeImgName = "Ocean7CroppedSquashed500W.png";
            seaScapeImg = "\'"
                + shopifyFilePrefix
                + seaScapeImgName.replace("(", "_").replace(")", "_")  /* ### (need to formalize these image names) ### */
                + "\'";
            seaScapeHorizonImgName = "Ocean7Horizon500W.png";
            seaScapeHorizonImg = "\'"
                + shopifyFilePrefix
                + seaScapeHorizonImgName.replace("(", "_").replace(")", "_")  /* ### (need to formalize these image names) ### */
                + "\'";
            /* Seascape foreground */
            seaScapeHTML = '<div style=\"position: absolute; bottom: ' + seaScapeBottomOffset + 'px; left: ' + seaScapeLeftOffset + 'px; z-index: 4;\">';
            seaScapeHTML += '<img src=' + seaScapeImg;
            seaScapeHTML += ' class=\"seaScape\" width=\"' + seaScapeWidth + 'px\" scaleheight=0.20 ';
            seaScapeHTML += ' style=\"height: ' + seaScapeHeight + 'px; scalewidth: 4.0;\" />';
            seaScapeHTML += '</div>';
            /* Seascape horizon */
            seaScapeHTML += '<div style=\"position: absolute; bottom: ' + seaScapeHorizonBottomOffset + 'px; left: ' + seaScapeHorizonLeftOffset + 'px; z-index: 1;\">';
            seaScapeHTML += '<img src=' + seaScapeHorizonImg;
            /* seaScapeHTML +=     ' class=\"seaScape\" width=\"'+seaScapeHorizonWidth+'px\" height=\"'+seaScapeHorizonHeight+'px\"' ; */
            seaScapeHTML += ' style=\"width: ' + seaScapeHorizonWidth + 'px; height: auto;\" />';
            seaScapeHTML += '</div>';
        }
        else {
            seaScapeImg = "";
            seaScapeHorizonImg = "";
            seaScapeHTML = "";
        };

        var shipImgTransparentBackground = localStorage.shipImageTransparentBackground;
        var noBackgroundShipDrawing;
        var shipBorder;
        if (shipImgTransparentBackground === "transparent") {
            noBackgroundShipDrawing = true;
            shipBorder = "";
        }
        else {
            noBackgroundShipDrawing = false;
            shipBorder = "border-style: solid; border-width: 3px; border-color: darkblue;";
        };
        /*
        localStorage.setItem('MapStyleImg', 
                             '\"https://cdn.shopify.com/s/files/1/1336/0641/files/2016-NAtlantic-MayanGlow-640pxW.png\" ' 
                             );
        localStorage.setItem('FrameImg', 
                            '\"https://cdn.shopify.com/s/files/1/1336/0641/files/GoldRatio-Med-Black-NoRuler-640pxW.png\" ' ; 
                             );
        localStorage.setItem('shipPicImg', 
                            '\"https://cdn.shopify.com/s/files/1/1336/0641/files/St_Paul-24-640pxW.jpg\" ' ;
                             );

        var webMapImg = localStorage.MapStyleImg ;
        var webFrameImg = localStorage.FrameIg ;
        var webShipImgQuoted = localStorage.shipPicImg ;
        */

        /* examples...
        var webMapImg =   '\"https://cdn.shopify.com/s/files/1/1336/0641/files/2016-NAtlantic-MayanGlow-640pxW.png\" ' ;
        var webShipImgQuoted =      '\"https://cdn.shopify.com/s/files/1/1336/0641/files/St_Paul-24-640pxW.jpg\" ' ;
        var webFrameImg =     '\"https://cdn.shopify.com/s/files/1/1336/0641/files/GoldRatio-Med-Black-NoRuler-640pxW.png\" ' ; 
        */

        var ImgOverlayHTML = '<p>Testing...</p>';

        /* map */
        /*       
        
                var webFrameTopThickness = 30 * webFrameScale ;
                var webFrameBottomThickness = webFrameTopThickness ;
                var webFrameLeftThickness = webFrameTopThickness ;
                var webFrameRightThickness = webFrameTopThickness ;
        
                var topMargin = 20 ;
                var leftMargin = 20 ;
                var webFrameScale = 1.0 ;
        */
        //        var webMapDivStyle, webMapAttribs, webMapStyle;
        var webMapTopOffset, webMapLeftOffset;
        //webMapTopOffset = 20 ;
        //webMapLeftOffset = 240 ;
        //webMapTopOffset = topMargin+webFrameTopThickness ;
        webMapTopOffset = topMargin;
        webMapLeftOffset = leftMargin + webFrameLeftThickness;

        ImgOverlayHTML += '<div style=\"position: relative; top: ' + webMapTopOffset + 'px; left: ' + webMapLeftOffset + 'px; z-index: 0; text-shadow: 1px 1px 0px Ivory;\">';
        ImgOverlayHTML += '<img src=' + webMapImg;
        ImgOverlayHTML += ' class=\"map\" style=\"width: ' + webMapWidth + 'px; height: ' + webMapHeight + ';\" />';

        /* header text */
        ImgOverlayHTML += '<div style=\"position: absolute; top: -34px; left: -0px; width: 510px; height: 80px; z-index: 25; line-height: 0.9; color red\">';
        ImgOverlayHTML += headerText;
        ImgOverlayHTML += '</div>';

        /* control buttons...  left offset when column == '+ (webFrameWidth-webFrameLeftOffset)+'  ? */
        var controlButtonOffset = 0;
        if (controlButtonPlacement == "RightColumn") {
            controlButtonOffset = webFrameWidth + (2 * webFrameLeftOffset) + buttonWidth;
            ImgOverlayHTML += '<div style=\"position: absolute; top: -34px; left: ' + controlButtonOffset + 'px; width: 510px; height: 80px; z-index: 1000; font-size: 8px; line-height: 0.9; color red\">';
        }
        else {
            ImgOverlayHTML += '<div style=\"position: absolute; top: -34px; left: ' + controlButtonOffset + 'px; width: 510px; height: 80px; z-index: 1000; font-size: 8px; line-height: 0.9; color red\">';
        }
        ImgOverlayHTML += controlButtons;
        ImgOverlayHTML += '</div>';

        /* size buttons...  left offset when column == '+ (webFrameWidth-webFrameLeftOffset)+'  ? */
        var sizeButtonOffset = 0;
        if (sizeButtonPlacement == "RightColumn") {
            sizeButtonOffset = webFrameWidth + (2 * webFrameLeftOffset) + buttonWidth;
            ImgOverlayHTML += '<div style=\"position: absolute; bottom: -125px; left: ' + sizeButtonOffset + 'px; width: 510px; height: 80px; z-index: 1000; font-size: 8px; line-height: 0.9; color red\">';
        }
        else {
            ImgOverlayHTML += '<div style=\"position: absolute; bottom: -125px; left: ' + sizeButtonOffset + 'px; width: 510px; height: 80px; z-index: 1000; font-size: 8px; line-height: 0.9; color red\">';
        }
        ImgOverlayHTML += sizeButtons;
        ImgOverlayHTML += '</div>';

        /* frame */
        ImgOverlayHTML += '<div' + webFrameDivStyle;
        /*                   <div style="position: absolute; bottom:-130; left:-105; zindex: 10;">
        ImgOverlayHTML +=   '<div style=\"position: absolute; bottom: -85px; left: -60px; z-index: 10;\">' ;
         */
        ImgOverlayHTML += '<img src=' + webFrameImg + webFrameAttribs + webFrameStyle + '/>';
        ImgOverlayHTML += '</div>';

        /* Under Construction icon */
        /*
            '<img   src="https://cdn.shopify.com/s/files/1/1336/0641/files/EnobrasUnderConstruction.gif" 
                    alt="Site Under Construction" 
                    style="display: block; position: absolute; top: 0px; left: 0px; width: 60px; height: 60px;" />
        */
        ImgOverlayHTML += '<div style=\"position: absolute; top: -34px; left: -40px; z-index: 12;\">';
        ImgOverlayHTML += '<img src=' + '\"https://cdn.shopify.com/s/files/1/1336/0641/files/EnobrasUnderConstruction.gif\"';
        ImgOverlayHTML += ' class=\"UnderConstructionIcon\" width=\"60px\" height=\"auto\"';
        ImgOverlayHTML += ' alt=\"Site Under Construction\"';
        ImgOverlayHTML += ' style=\"width: 60px; maxwidth: 25%; height: auto;\" />';
        ImgOverlayHTML += '</div>';

        /* Seascape */
        ImgOverlayHTML += seaScapeHTML;

        /* ship */
        var aPrioriShipWidth = 160;
        var targetShipImageWidth, targetShipImageHeight, targetShipImageArea;
        var shipImageWidth, shipImageHeight;
        var shipImageBottomOffset, shipImageLeftOffset;
        var webShipImgWidth, webShipImgHeight, webShipImgXYRatio, webShipImgXYArea;

        getImgWidthAndHeight(
            webShipImg,
            function (width, height) {
                localStorage.webShipImgWidth = width;
                localStorage.webShipImgHeight = height;
            }
        );
        //### getImgWidthAndHeight not working? ###
        if ((localStorage.webShipImgWidth == undefined) || (localStorage.webShipImgHeight == undefined)) {
            localStorage.webShipImgWidth = aPrioriShipWidth * webFrameScale;  // ### ?? small at start ###
            localStorage.webShipImgHeight = localStorage.webShipImgWidth / 1.618;  // golden ratio = 1.618          
        }
        console.log("localStorage.webShipImgWidth ==" + localStorage.webShipImgWidth + "; Number(localStorage.webShipImgWidth) ==" + Number(localStorage.webShipImgWidth));
        webShipImgWidth = Number(localStorage.webShipImgWidth);
        webShipImgHeight = Number(localStorage.webShipImgHeight);
        webShipImgXYRatio = webShipImgHeight / webShipImgWidth;
        webShipImgArea = webShipImgHeight * webShipImgWidth;
        console.log("webShipImgWidth =" + webShipImgWidth + "; webShipImgHeight =" + webShipImgHeight + "; webShipImgXYRatio =" + webShipImgXYRatio);

        targetShipImageWidth = aPrioriShipWidth * webFrameScale;  // a priori image target width = 160
        targetShipImageHeight = targetShipImageWidth / 1.618;  // golden ratio = 1.618
        targetShipImageArea = targetShipImageWidth * targetShipImageHeight;
        console.log("targetShipImageWidth =" + targetShipImageWidth + "; targetShipImageHeight =" + targetShipImageHeight + "; targetShipImageArea =" + targetShipImageArea);
        if (noBackgroundShipDrawing) {
            targetShipImageArea *= 1.5;
            console.log("... but increasing for drawings with no background: targetShipImageArea =" + targetShipImageArea);
        }
        //targetShipImageArea = webShipImageWidth * (webShipImgXYRatio * webShipImageWidth) ;
        //webShipImageWidth = targetShipImageArea/(webShipImgXYRatio * webShipImageWidth) ;
        //webShipImageWidth^^2 = targetShipImageArea/webShipImgXYRatio ;
        webShipImageWidth = Math.sqrt(targetShipImageArea / webShipImgXYRatio);
        console.log("webShipImageWidth = Math.sqrt(targetShipImageArea/webShipImgXYRatio) ==" + webShipImageWidth);
        webShipImageHeight = webShipImgXYRatio * webShipImageWidth;
        console.log("webShipImageHeight = webShipImgXYRatio * webShipImageWidth == " + webShipImageHeight);
        webShipImageArea = webShipImageWidth * webShipImageHeight;
        //console.log("webShipImageWidth ="+webShipImageWidth+"; webShipImageHeight ="+webShipImageHeight+"; webShipImageArea ="+webShipImageArea) ;
        console.log("webShipImageArea ==" + webShipImageArea);

        shipImageWidth = webShipImageWidth; //160 * webFrameScale  ;  // image target width = 160
        shipImageHeight = webShipImageHeight; //"auto" ;
        shipImageBottomOffset = 45 * webFrameScale;
        //shipImageBottomOffset += Math.max(0.0,(targetShipImageHeight-webShipImageHeight)/4.0);
        shipImageBottomOffset += (targetShipImageHeight - webShipImageHeight) / 4.0;
        shipImageLeftOffset = 115 * webFrameScale;
        shipImageLeftOffset += (targetShipImageWidth - webShipImageWidth) / 2.0;

        /*        ImgOverlayHTML +=   '<div style=\"position: absolute; top: 120px; left: 120px; z-index: 3;\">' ;  */
        //ImgOverlayHTML +=   '<div style=\"position: absolute; bottom: 45px; left: 115px; z-index: 3;\">' ;
        ImgOverlayHTML += '<div style=\"position: absolute; bottom: ' + shipImageBottomOffset + 'px; left: ' + shipImageLeftOffset + 'px; z-index: 3;\">';
        ImgOverlayHTML += '<img src="' + webShipImg + '"';
        //ImgOverlayHTML +=     ' class=\"ship\" width=\"160px\" height=\"auto\"' ;
        //ImgOverlayHTML +=     ' style=\"width: 160px maxwidth:25%; height: auto; ' ;
        ImgOverlayHTML += ' class=\"ship\" width=\"' + shipImageWidth + 'px\" height=\"' + shipImageHeight + '\"';
        ImgOverlayHTML += ' style=\"width: ' + shipImageWidth + 'px maxwidth:25%; height: auto; ';
        /* ImgOverlayHTML +=     ' border-style: solid; border-width: 3px; border-color: darkblue; \" />' ; */
        ImgOverlayHTML += shipBorder;
        ImgOverlayHTML += '\" />';
        ImgOverlayHTML += '</div>';

        /****** TextBoxes *******/
        /* title */
        ImgOverlayHTML += generateTitleTextBoxHTML(webFrameScale, showTextBoxSVG);

        /* departure */
        ImgOverlayHTML += generateOriginTextBoxHTML(webFrameScale, showTextBoxSVG);

        /* arrival */
        ImgOverlayHTML += generateDestinationTextBoxHTML(webFrameScale, showTextBoxSVG);

        /* ship info */
        ImgOverlayHTML += generateShipInfoHTML(webFrameScale, showTextBoxSVG);

        /* plaque */
        ImgOverlayHTML += generatePlaqueHTML(
            webFrameScale,
            webFrameTopOffset,
            webFrameTopThickness,
            webFrameHeight,
            webMapHeight,
            webMapWidth,
            numAvailPlaqueLines, //isn't used below
            numFilledPlaqueLines,
            maxLnOfFilledPlaqueLines,
            shopifyFilePrefix,
            showTextBoxSVG
        );

        /* wrap up */
        ImgOverlayHTML += '</div>';
        // console.log("ImgOverlayHTML=" + ImgOverlayHTML);

        if ( !window.overlaysRendered ) {
            window.addEventListener('DOMContentLoaded', function () {
                document.getElementById("DisplayOverlays").innerHTML = ImgOverlayHTML;
                window.overlaysRendered = true;
            });
        } else {
            document.getElementById("DisplayOverlays").innerHTML = ImgOverlayHTML;
        }
        // ]]>


        console.log("Preview Page:  OriginatingPage =" + OriginatingPage);
        console.log("               webMapStyle =" + webMapStyle);
        console.log("               webMapImg =" + webMapImg);
        console.log("               webShipImg =" + webShipImg);
        console.log("               webFrameStyleName =" + webFrameStyleName);
        console.log("               webFrameImg =" + webFrameImg);
        console.log("               webFrameAbbrv =" + webFrameAbbrv);
        console.log("               webFrameStyleName =" + webFrameStyleName);
    } /* function RelationShipsPreviewZ() */

    /* RelationShipsPreviewZ("initialView", "noFrame") */
    if (localStorage.viewingTextBoxes == "yup") {
        RelationShipsPreviewZ("showTextBoxes", "showFrame");
    }
    else {
        RelationShipsPreviewZ("mockup", "showFrame", "BuyButton", "SaveButton", "ReturnButton");
    }
// ]]></script>